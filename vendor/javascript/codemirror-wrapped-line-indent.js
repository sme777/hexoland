import{getIndentUnit as t}from"@codemirror/language";import{RangeSetBuilder as e}from"@codemirror/state";import{Decoration as i,ViewPlugin as n}from"@codemirror/view";class WrappedLineIndent{constructor(e){this.view=e;this.indentUnit=t(e.state);this.initialPaddingLeft=null;this.isChrome=window===null||window===void 0?void 0:window.navigator.userAgent.includes("Chrome");this.generate(e.state)}update(e){const i=t(e.state);if(i!==this.indentUnit||e.docChanged||e.viewportChanged){this.indentUnit=i;this.generate(e.state)}}generate(t){const i=new e;this.initialPaddingLeft?this.addStyleToBuilder(i,t,this.initialPaddingLeft):this.view.requestMeasure({read:t=>{const e=t.contentDOM.querySelector(".cm-line");if(e){this.initialPaddingLeft=window.getComputedStyle(e).getPropertyValue("padding-left");this.addStyleToBuilder(i,t.state,this.initialPaddingLeft)}this.decorations=i.finish()}});this.decorations=i.finish()}addStyleToBuilder(t,e,n){const s=this.getVisibleLines(e);for(const o of s){const{numColumns:s,containsTab:d}=this.numColumns(o.text,e.tabSize);const a=`calc(${s+this.indentUnit}ch + ${n})`;const r=this.isChrome?`calc(-${s+this.indentUnit}ch - ${d?1:0}px)`:`-${s+this.indentUnit}ch`;t.add(o.from,o.from,i.line({attributes:{style:`padding-left: ${a}; text-indent: ${r};`}}))}}getVisibleLines(t){const e=new Set;let i=null;for(const{from:n,to:s}of this.view.visibleRanges){let o=n;while(o<=s){const n=t.doc.lineAt(o);if(i!==n){e.add(n);i=n}o=n.to+1}}return e}numColumns(t,e){let i=0;let n=false;t:for(let s=0;s<t.length;s++)switch(t[s]){case" ":i+=1;continue t;case"\t":i+=e-i%e;n=true;continue t;case"\r":continue t;default:break t}return{numColumns:i,containsTab:n}}}const s=[n.fromClass(WrappedLineIndent,{decorations:t=>t.decorations})];export{s as wrappedLineIndent};

