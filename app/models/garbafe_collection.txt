<<<<<<< HEAD
=======

LINUX_SAVE_PATH = "/home/spetrosyan/Desktop/hexoland/sequences/"

bg = BondGenerator.new

# Core Bonds

s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
p s14_handles, s14_handles_score 
p "Handle S14 score: #{s14_handles_score}"

s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
p s25_handles, s25_handles_score
p "Handle S25 score: #{s25_handles_score}"

s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
p s36_handles, s36_handles_score
p "Handle S36 score: #{s36_handles_score}"

# Hierarchical Bonds

s14_half_handles, s14_half_handles_score = bg.best_sides_out_of("S14", "handles", 100, [], count=24, number=1, overlap=0.5, godmode=false)
p s14_half_handles, s14_half_handles_score 
p "Half-Handle S14 score: #{s14_half_handles_score}"

s25_half_handles, s25_half_handles_score = bg.best_sides_out_of("S25", "handles", 100, [], count=24, number=1, overlap=0.5, godmode=false)
p s25_half_handles, s25_half_handles_score 
p "Half-Handle S25 score: #{s25_half_handles_score}"

s36_half_handles, s36_half_handles_score = bg.best_sides_out_of("S36", "handles", 100, [], count=24, number=1, overlap=0.5, godmode=false)
p s36_half_handles, s36_half_handles_score 
p "Half-Handle S36 score: #{s36_half_handles_score}"

### T1

### Layer 1

m1a_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"]
})

m2a_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S3" => [s36_half_handles[2][0], "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S2" => [s25_half_handles[2][0], "BS"],
    "S3" => [s36_half_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[9][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T1 = bg.sequence_generator({
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
})

m6a_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_half_handles[0][0], "BS"],
    "S2" => [s25_half_handles[0][0], "BS"],
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
})

m7a_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_half_handles[1][0], "BS"],
    "S2" => [s25_half_handles[1][0], "BS"],
    "S3" => [s36_half_handles[0][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"]
})

m2b_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S3" => [s36_half_handles[12+2][0], "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S2" => [s25_half_handles[12+2][0], "BS"],
    "S3" => [s36_half_handles[12+1][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[9+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T1 = bg.sequence_generator({
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
})

m6b_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+0][0], "BS"],
    "S2" => [s25_half_handles[12+0][0], "BS"],
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
})

m7b_2x7M_T1 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+1][0], "BS"],
    "S2" => [s25_half_handles[12+1][0], "BS"],
    "S3" => [s36_half_handles[12+0][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})

### T2

### Layer 1

m1a_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[0][0]), "BS"]
})

m2a_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S3" => [s36_half_handles[5][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S2" => [s25_half_handles[4][0], "BS"],
    "S3" => [s36_half_handles[4][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T2 = bg.sequence_generator({
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
})

m6a_2x7M_T2 = bg.sequence_generator({
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
})

m7a_2x7M_T2 = bg.sequence_generator({
    "S2" => [s25_half_handles[3][0], "BS"],
    "S3" => [s36_half_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[0+12][0]), "BS"]
})

m2b_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S3" => [s36_half_handles[12+5][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[1+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[12+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S2" => [s25_half_handles[12+4][0], "BS"],
    "S3" => [s36_half_handles[12+4][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[2+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T2 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T2 = bg.sequence_generator({
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
})

m6b_2x7M_T2 = bg.sequence_generator({
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
})

m7b_2x7M_T2 = bg.sequence_generator({
    "S2" => [s25_half_handles[12+3][0], "BS"],
    "S3" => [s36_half_handles[12+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})

### T3

### Layer 1

m1a_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[4][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[3][0]), "BS"]
})

m2a_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S3" => [s36_half_handles[7][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[4][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[5][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S3" => [s36_half_handles[6][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[5][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T3 = bg.sequence_generator({
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[3][0]), "BS"]
})

m6a_2x7M_T3 = bg.sequence_generator({
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
})

m7a_2x7M_T3 = bg.sequence_generator({
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[3+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[4+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[3+12][0]), "BS"]
})

m2b_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S3" => [s36_half_handles[12+7][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[4+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[5+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S3" => [s36_half_handles[12+6][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[5+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T3 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T3 = bg.sequence_generator({
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[3+12][0]), "BS"]
})

m6b_2x7M_T3 = bg.sequence_generator({
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
})

m7b_2x7M_T3 = bg.sequence_generator({
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})

### T4

### Layer 1

m1a_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[7][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[7][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[9][0]), "BS"]
})

m2a_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[8][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[8][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_half_handles[5][0], "BS"],
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[6][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[7][0]), "BS"]
})

m6a_2x7M_T4 = bg.sequence_generator({
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[6][0]), "BS"]
})

m7a_2x7M_T4 = bg.sequence_generator({
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[7+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[7+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[9+12][0]), "BS"]
})

m2b_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[8+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[8+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T4 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+5][0], "BS"],
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[12+6][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[12+7][0]), "BS"]
})

m6b_2x7M_T4 = bg.sequence_generator({
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[12+6][0]), "BS"]
})

m7b_2x7M_T4 = bg.sequence_generator({
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})

### T5

### Layer 1

m1a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"],
    "S5" => [bg.complement_side(s25_half_handles[11][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[8][0]), "BS"]
})

m2a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_half_handles[6][0], "BS"],
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[10][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[11][0]), "BS"]
})

m6a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_half_handles[7][0], "BS"],
    "S2" => [s25_half_handles[8][0], "BS"],
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[10][0]), "BS"]
})

m7a_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_half_handles[8][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"],
    "S5" => [bg.complement_side(s25_half_handles[11+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[8+12][0]), "BS"]
})

m2b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+6][0], "BS"],
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[12+10][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[12+11][0]), "BS"]
})

m6b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+7][0], "BS"],
    "S2" => [s25_half_handles[8+12][0], "BS"],
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[12+10][0]), "BS"]
})

m7b_2x7M_T5 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+8][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})

### T6

### Layer 1

m1a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"]
})

m2a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S2" => [s25_half_handles[11][0], "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_half_handles[9][0], "BS"],
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[2][0]), "BS"]
})

m6a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_half_handles[10][0], "BS"],
    "S2" => [s25_half_handles[9][0], "BS"],
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[1][0]), "BS"]
})

m7a_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_half_handles[11][0], "BS"],
    "S2" => [s25_half_handles[10][0], "BS"],
    "S3" => [s36_half_handles[8][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"]
})

m2b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S2" => [s25_half_handles[11+12][0], "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+9][0], "BS"],
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[12+2][0]), "BS"]
})

m6b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+10][0], "BS"],
    "S2" => [s25_half_handles[9+12][0], "BS"],
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[12+1][0]), "BS"]
})

m7b_2x7M_T6 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+11][0], "BS"],
    "S2" => [s25_half_handles[10+12][0], "BS"],
    "S3" => [s36_half_handles[12+8][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})

### T7

### Layer 1

m1a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[0][0], "BS"],
    "S2" => [s25_handles[0][0], "BS"],
    "S3" => [s36_handles[0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[10][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[0][0]), "BS"]
})

m2a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[1][0], "BS"],
    "S2" => [s25_handles[1][0], "BS"],
    "S3" => [s36_half_handles[11][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[11][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[9][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
})

m3a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[2][0], "BS"],
    "S2" => [s25_half_handles[7][0], "BS"],
    "S3" => [s36_half_handles[10][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[6][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
})

m4a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[3][0], "BS"],
    "S2" => [s25_handles[3][0], "BS"],
    "S3" => [s36_handles[1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
})

m5a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_half_handles[2][0], "BS"],
    "S2" => [s25_handles[2][0], "BS"],
    "S3" => [s36_handles[2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[1][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[5][0]), "BS"]
})

m6a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_half_handles[3][0], "BS"],
    "S2" => [s25_half_handles[5][0], "BS"],
    "S3" => [s36_handles[3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[4][0]), "BS"]
})

m7a_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_half_handles[4][0], "BS"],
    "S2" => [s25_half_handles[6][0], "BS"],
    "S3" => [s36_half_handles[9][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
})

### Layer 2

m1b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[4+0][0], "BS"],
    "S2" => [s25_handles[4+0][0], "BS"],
    "S3" => [s36_handles[4+0][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[10+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[2+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[0+12][0]), "BS"]
})

m2b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[4+1][0], "BS"],
    "S2" => [s25_handles[4+1][0], "BS"],
    "S3" => [s36_half_handles[12+11][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[11+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[12+9][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
})

m3b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[4+2][0], "BS"],
    "S2" => [s25_half_handles[7+12][0], "BS"],
    "S3" => [s36_half_handles[12+10][0], "BS"],
    "S4" => [bg.complement_side(s14_half_handles[6+12][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
})

m4b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_handles[4+3][0], "BS"],
    "S2" => [s25_handles[4+3][0], "BS"],
    "S3" => [s36_handles[4+1][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
})

m5b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+2][0], "BS"],
    "S2" => [s25_handles[4+2][0], "BS"],
    "S3" => [s36_handles[4+2][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
    "S5" => [bg.complement_side(s25_half_handles[1+12][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[5+12][0]), "BS"]
})

m6b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+3][0], "BS"],
    "S2" => [s25_half_handles[5+12][0], "BS"],
    "S3" => [s36_handles[4+3][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
    "S6" => [bg.complement_side(s36_half_handles[4+12][0]), "BS"]
})

m7b_2x7M_T7 = bg.sequence_generator({
    "S1" => [s14_half_handles[12+4][0], "BS"],
    "S2" => [s25_half_handles[6+12][0], "BS"],
    "S3" => [s36_half_handles[12+9][0], "BS"],
    "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
    "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
    "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
})


basic_zs = bg.get_basic_zs

z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 7, 0.25, 100, 90, 93)
z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
p z_8h_tail_bonds, z_8h_head_bonds, z_score

m1a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
m2a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
m3a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
m4a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
m5a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
m6a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
m7a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

m1b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
m2b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
m3b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
m4b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
m5b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
m6b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])
m7b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[6])



# #### 8H ####

# T1

bg.to_csv(["Sequence"] + m1a_2x7M_T1 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T1.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T1 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T1.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T1 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T1.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T1 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T1.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T1 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T1.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T1 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T1.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T1 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T1.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T1 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T1.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T1 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T1.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T1 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T1.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T1 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T1.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T1 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T1.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T1 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T1.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T1 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T1.csv")

# T2

bg.to_csv(["Sequence"] + m1a_2x7M_T2 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T2.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T2 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T2.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T2 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T2.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T2 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T2.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T2 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T2.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T2 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T2.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T2 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T2.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T2 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T2.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T2 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T2.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T2 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T2.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T2 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T2.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T2 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T2.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T2 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T2.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T2 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T2.csv")

# T3

bg.to_csv(["Sequence"] + m1a_2x7M_T3 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T3.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T3 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T3.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T3 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T3.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T3 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T3.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T3 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T3.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T3 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T3.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T3 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T3.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T3 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T3.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T3 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T3.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T3 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T3.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T3 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T3.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T3 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T3.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T3 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T3.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T3 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T3.csv")

# T4

bg.to_csv(["Sequence"] + m1a_2x7M_T4 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T4.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T4 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T4.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T4 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T4.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T4 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T4.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T4 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T4.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T4 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T4.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T4 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T4.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T4 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T4.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T4 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T4.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T4 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T4.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T4 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T4.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T4 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T4.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T4 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T4.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T4 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T4.csv")

# T5

bg.to_csv(["Sequence"] + m1a_2x7M_T5 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T5.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T5 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T5.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T5 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T5.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T5 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T5.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T5 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T5.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T5 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T5.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T5 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T5.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T5 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T5.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T5 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T5.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T5 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T5.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T5 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T5.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T5 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T5.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T5 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T5.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T5 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T5.csv")

# T6

bg.to_csv(["Sequence"] + m1a_2x7M_T6 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T6.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T6 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T6.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T6 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T6.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T6 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T6.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T6 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T6.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T6 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T6.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T6 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T6.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T6 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T6.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T6 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T6.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T6 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T6.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T6 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T6.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T6 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T6.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T6 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T6.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T6 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T6.csv")

# T7

bg.to_csv(["Sequence"] + m1a_2x7M_T7 + m1a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1a_2x7_T7.csv")
bg.to_csv(["Sequence"] + m2a_2x7M_T7 + m2a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2a_2x7_T7.csv")
bg.to_csv(["Sequence"] + m3a_2x7M_T7 + m3a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3a_2x7_T7.csv")
bg.to_csv(["Sequence"] + m4a_2x7M_T7 + m4a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4a_2x7_T7.csv")
bg.to_csv(["Sequence"] + m5a_2x7M_T7 + m5a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5a_2x7_T7.csv")
bg.to_csv(["Sequence"] + m6a_2x7M_T7 + m6a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6a_2x7_T7.csv")
bg.to_csv(["Sequence"] + m7a_2x7M_T7 + m7a_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7a_2x7_T7.csv")

bg.to_csv(["Sequence"] + m1b_2x7M_T7 + m1b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m1b_2x7_T7.csv")
bg.to_csv(["Sequence"] + m2b_2x7M_T7 + m2b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m2b_2x7_T7.csv")
bg.to_csv(["Sequence"] + m3b_2x7M_T7 + m3b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m3b_2x7_T7.csv")
bg.to_csv(["Sequence"] + m4b_2x7M_T7 + m4b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m4b_2x7_T7.csv")
bg.to_csv(["Sequence"] + m5b_2x7M_T7 + m5b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m5b_2x7_T7.csv")
bg.to_csv(["Sequence"] + m6b_2x7M_T7 + m6b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m6b_2x7_T7.csv")
bg.to_csv(["Sequence"] + m7b_2x7M_T7 + m7b_z_8h + basic_zs, "#{LINUX_SAVE_PATH}7x(2x7)/m7b_2x7_T7.csv")
>>>>>>> 58c920921467a868491803fcc1fb33d66d7eb573

# puts z_3x6_6h_tail_bonds.inspect, z_score
# bg = BondGenerator.new
# 16M#A

# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s14_score
# s25_4s4b, s25_score = bg.best_sides_out_of("S25", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s25_score
# s36_4s4b, s36_score = bg.best_sides_out_of("S36", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s36_score


# m1_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"]
# })

# m2_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S2" => [s25_4s4b[15][0], "BS"],
#     "S3" => [s36_4s4b[12][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S2" => [s25_4s4b[14][0], "BS"],
#     "S3" => [s36_4s4b[13][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S2" => [s25_4s4b[13][0], "BS"],
#     "S3" => [s36_4s4b[14][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[12][0], "BS"],
#     "S2" => [s25_4s4b[9][0], "BS"],
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[13][0], "BS"],
#     "S2" => [s25_4s4b[10][0], "BS"],
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[14][0], "BS"],
#     "S2" => [s25_4s4b[11][0], "BS"],
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_A = bg.sequence_generator({
#     "S1" => [s14_4s4b[15][0], "BS"],
#     "S2" => [s25_4s4b[12][0], "BS"],
#     "S3" => [s36_4s4b[15][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # # 16M#B

# m1_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[12][0]), "BS"],
# })

# m2_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[15][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[13][0]), "BS"],
# })

# m6_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[14][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[14][0]), "BS"],
# })

# m10_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[14][0], "BS"],
#     "S2" => [s25_4s4b[10][0], "BS"],
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[13][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[15][0]), "BS"],
# })

# m14_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[12][0], "BS"],
#     "S2" => [s25_4s4b[11][0], "BS"],
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[15][0], "BS"],
#     "S2" => [s25_4s4b[9][0], "BS"],
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_B = bg.sequence_generator({
#     "S1" => [s14_4s4b[13][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # 16M#C

# m1_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[12][0]), "BS"],
# })

# m2_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[13][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[9][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[14][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[10][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S2" => [s25_4s4b[13][0], "BS"],
#     "S3" => [s36_4s4b[13][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[15][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[11][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S2" => [s25_4s4b[15][0], "BS"],
#     "S3" => [s36_4s4b[14][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_C = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S2" => [s25_4s4b[12][0], "BS"],
#     "S3" => [s36_4s4b[15][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_C = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m_C = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_C = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_C = bg.sequence_generator({
#     "S3" => [s36_4s4b[12][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # 16M#D

# m1_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[14][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[12][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[13][0]), "BS"]
# })

# m2_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[12][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[10][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[15][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[11][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[13][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[9][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[13][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[14][0]), "BS"]
# })

# m6_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[15][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[15][0]), "BS"]
# })

# m10_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_D = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_D = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[12][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[12][0]), "BS"]
# })

# m14_16m_D = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_D = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_D = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# bg.to_csv(["Sequence"] + m1_16m_A, "#{LINUX_SAVE_PATH}64M/m1A.csv")
# bg.to_csv(["Sequence"] + m2_16m_A, "#{LINUX_SAVE_PATH}64M/m2A.csv")
# bg.to_csv(["Sequence"] + m3_16m_A, "#{LINUX_SAVE_PATH}64M/m3A.csv")
# bg.to_csv(["Sequence"] + m4_16m_A, "#{LINUX_SAVE_PATH}64M/m4A.csv")
# bg.to_csv(["Sequence"] + m5_16m_A, "#{LINUX_SAVE_PATH}64M/m5A.csv")
# bg.to_csv(["Sequence"] + m6_16m_A, "#{LINUX_SAVE_PATH}64M/m6A.csv")
# bg.to_csv(["Sequence"] + m7_16m_A, "#{LINUX_SAVE_PATH}64M/m7A.csv")
# bg.to_csv(["Sequence"] + m8_16m_A, "#{LINUX_SAVE_PATH}64M/m8A.csv")
# bg.to_csv(["Sequence"] + m9_16m_A, "#{LINUX_SAVE_PATH}64M/m9A.csv")
# bg.to_csv(["Sequence"] + m10_16m_A, "#{LINUX_SAVE_PATH}64M/m10A.csv")
# bg.to_csv(["Sequence"] + m11_16m_A, "#{LINUX_SAVE_PATH}64M/m11A.csv")
# bg.to_csv(["Sequence"] + m12_16m_A, "#{LINUX_SAVE_PATH}64M/m12A.csv")
# bg.to_csv(["Sequence"] + m13_16m_A, "#{LINUX_SAVE_PATH}64M/m13A.csv")
# bg.to_csv(["Sequence"] + m14_16m_A, "#{LINUX_SAVE_PATH}64M/m14A.csv")
# bg.to_csv(["Sequence"] + m15_16m_A, "#{LINUX_SAVE_PATH}64M/m15A.csv")
# bg.to_csv(["Sequence"] + m16_16m_A, "#{LINUX_SAVE_PATH}64M/m16A.csv")


# bg.to_csv(["Sequence"] + m1_16m_B, "#{LINUX_SAVE_PATH}64M/m1B.csv")
# bg.to_csv(["Sequence"] + m2_16m_B, "#{LINUX_SAVE_PATH}64M/m2B.csv")
# bg.to_csv(["Sequence"] + m3_16m_B, "#{LINUX_SAVE_PATH}64M/m3B.csv")
# bg.to_csv(["Sequence"] + m4_16m_B, "#{LINUX_SAVE_PATH}64M/m4B.csv")
# bg.to_csv(["Sequence"] + m5_16m_B, "#{LINUX_SAVE_PATH}64M/m5B.csv")
# bg.to_csv(["Sequence"] + m6_16m_B, "#{LINUX_SAVE_PATH}64M/m6B.csv")
# bg.to_csv(["Sequence"] + m7_16m_B, "#{LINUX_SAVE_PATH}64M/m7B.csv")
# bg.to_csv(["Sequence"] + m8_16m_B, "#{LINUX_SAVE_PATH}64M/m8B.csv")
# bg.to_csv(["Sequence"] + m9_16m_B, "#{LINUX_SAVE_PATH}64M/m9B.csv")
# bg.to_csv(["Sequence"] + m10_16m_B, "#{LINUX_SAVE_PATH}64M/m10B.csv")
# bg.to_csv(["Sequence"] + m11_16m_B, "#{LINUX_SAVE_PATH}64M/m11B.csv")
# bg.to_csv(["Sequence"] + m12_16m_B, "#{LINUX_SAVE_PATH}64M/m12B.csv")
# bg.to_csv(["Sequence"] + m13_16m_B, "#{LINUX_SAVE_PATH}64M/m13B.csv")
# bg.to_csv(["Sequence"] + m14_16m_B, "#{LINUX_SAVE_PATH}64M/m14B.csv")
# bg.to_csv(["Sequence"] + m15_16m_B, "#{LINUX_SAVE_PATH}64M/m15B.csv")
# bg.to_csv(["Sequence"] + m16_16m_B, "#{LINUX_SAVE_PATH}64M/m16B.csv")

# bg.to_csv(["Sequence"] + m1_16m_C, "#{LINUX_SAVE_PATH}64M/m1C.csv")
# bg.to_csv(["Sequence"] + m2_16m_C, "#{LINUX_SAVE_PATH}64M/m2C.csv")
# bg.to_csv(["Sequence"] + m3_16m_C, "#{LINUX_SAVE_PATH}64M/m3C.csv")
# bg.to_csv(["Sequence"] + m4_16m_C, "#{LINUX_SAVE_PATH}64M/m4C.csv")
# bg.to_csv(["Sequence"] + m5_16m_C, "#{LINUX_SAVE_PATH}64M/m5C.csv")
# bg.to_csv(["Sequence"] + m6_16m_C, "#{LINUX_SAVE_PATH}64M/m6C.csv")
# bg.to_csv(["Sequence"] + m7_16m_C, "#{LINUX_SAVE_PATH}64M/m7C.csv")
# bg.to_csv(["Sequence"] + m8_16m_C, "#{LINUX_SAVE_PATH}64M/m8C.csv")
# bg.to_csv(["Sequence"] + m9_16m_C, "#{LINUX_SAVE_PATH}64M/m9C.csv")
# bg.to_csv(["Sequence"] + m10_16m_C, "#{LINUX_SAVE_PATH}64M/m10C.csv")
# bg.to_csv(["Sequence"] + m11_16m_C, "#{LINUX_SAVE_PATH}64M/m11C.csv")
# bg.to_csv(["Sequence"] + m12_16m_C, "#{LINUX_SAVE_PATH}64M/m12C.csv")
# bg.to_csv(["Sequence"] + m13_16m_C, "#{LINUX_SAVE_PATH}64M/m13C.csv")
# bg.to_csv(["Sequence"] + m14_16m_C, "#{LINUX_SAVE_PATH}64M/m14C.csv")
# bg.to_csv(["Sequence"] + m15_16m_C, "#{LINUX_SAVE_PATH}64M/m15C.csv")
# bg.to_csv(["Sequence"] + m16_16m_C, "#{LINUX_SAVE_PATH}64M/m16C.csv")

# bg.to_csv(["Sequence"] + m1_16m_D, "#{LINUX_SAVE_PATH}64M/m1D.csv")
# bg.to_csv(["Sequence"] + m2_16m_D, "#{LINUX_SAVE_PATH}64M/m2D.csv")
# bg.to_csv(["Sequence"] + m3_16m_D, "#{LINUX_SAVE_PATH}64M/m3D.csv")
# bg.to_csv(["Sequence"] + m4_16m_D, "#{LINUX_SAVE_PATH}64M/m4D.csv")
# bg.to_csv(["Sequence"] + m5_16m_D, "#{LINUX_SAVE_PATH}64M/m5D.csv")
# bg.to_csv(["Sequence"] + m6_16m_D, "#{LINUX_SAVE_PATH}64M/m6D.csv")
# bg.to_csv(["Sequence"] + m7_16m_D, "#{LINUX_SAVE_PATH}64M/m7D.csv")
# bg.to_csv(["Sequence"] + m8_16m_D, "#{LINUX_SAVE_PATH}64M/m8D.csv")
# bg.to_csv(["Sequence"] + m9_16m_D, "#{LINUX_SAVE_PATH}64M/m9D.csv")
# bg.to_csv(["Sequence"] + m10_16m_D, "#{LINUX_SAVE_PATH}64M/m10D.csv")
# bg.to_csv(["Sequence"] + m11_16m_D, "#{LINUX_SAVE_PATH}64M/m11D.csv")
# bg.to_csv(["Sequence"] + m12_16m_D, "#{LINUX_SAVE_PATH}64M/m12D.csv")
# bg.to_csv(["Sequence"] + m13_16m_D, "#{LINUX_SAVE_PATH}64M/m13D.csv")
# bg.to_csv(["Sequence"] + m14_16m_D, "#{LINUX_SAVE_PATH}64M/m14D.csv")
# bg.to_csv(["Sequence"] + m15_16m_D, "#{LINUX_SAVE_PATH}64M/m15D.csv")
# bg.to_csv(["Sequence"] + m16_16m_D, "#{LINUX_SAVE_PATH}64M/m16D.csv")

# 64M of 4x16M but with 4S4O on the borders

# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s14_score
# s25_4s4b, s25_score = bg.best_sides_out_of("S25", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s25_score
# s36_4s4b, s36_score = bg.best_sides_out_of("S36", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s36_score


# m1_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"]
# })

# m2_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S2" => [s25_4s4b[15][0], "S"],
#     "S3" => [s36_4s4b[12][0], "S"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S2" => [s25_4s4b[14][0], "S"],
#     "S3" => [s36_4s4b[13][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S2" => [s25_4s4b[13][0], "S"],
#     "S3" => [s36_4s4b[14][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[12][0], "S"],
#     "S2" => [s25_4s4b[9][0], "S"],
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[13][0], "S"],
#     "S2" => [s25_4s4b[10][0], "S"],
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[14][0], "S"],
#     "S2" => [s25_4s4b[11][0], "S"],
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_A_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[15][0], "S"],
#     "S2" => [s25_4s4b[12][0], "S"],
#     "S3" => [s36_4s4b[15][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # # 16M#B

# m1_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[12][0]), "S"],
# })

# m2_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[15][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[13][0]), "S"],
# })

# m6_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[14][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[14][0]), "S"],
# })

# m10_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[14][0], "S"],
#     "S2" => [s25_4s4b[10][0], "S"],
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[13][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[15][0]), "S"],
# })

# m14_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[12][0], "S"],
#     "S2" => [s25_4s4b[11][0], "S"],
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[15][0], "S"],
#     "S2" => [s25_4s4b[9][0], "S"],
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_B_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[13][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # 16M#C

# m1_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[12][0]), "S"],
# })

# m2_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[13][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[9][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[14][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[10][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S2" => [s25_4s4b[13][0], "S"],
#     "S3" => [s36_4s4b[13][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[15][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[11][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S2" => [s25_4s4b[15][0], "S"],
#     "S3" => [s36_4s4b[14][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_C_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S2" => [s25_4s4b[12][0], "S"],
#     "S3" => [s36_4s4b[15][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_C_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m_C_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_C_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_C_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[12][0], "S"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # 16M#D

# m1_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[14][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[12][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[13][0]), "S"]
# })

# m2_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[12][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[10][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[15][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[11][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[13][0]), "S"],
#     "S5" => [bg.complement_side(s25_4s4b[9][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[13][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[14][0]), "S"]
# })

# m6_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[15][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[15][0]), "S"]
# })

# m10_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_D_O = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_D_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[12][0]), "S"],
#     "S6" => [bg.complement_side(s36_4s4b[12][0]), "S"]
# })

# m14_16m_D_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_D_O = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_D_O = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# bg.to_csv(["Sequence"] + m1_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m1A_O.csv")
# bg.to_csv(["Sequence"] + m2_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m2A_O.csv")
# bg.to_csv(["Sequence"] + m3_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m3A_O.csv")
# bg.to_csv(["Sequence"] + m4_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m4A_O.csv")
# bg.to_csv(["Sequence"] + m5_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m5A_O.csv")
# bg.to_csv(["Sequence"] + m6_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m6A_O.csv")
# bg.to_csv(["Sequence"] + m7_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m7A_O.csv")
# bg.to_csv(["Sequence"] + m8_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m8A_O.csv")
# bg.to_csv(["Sequence"] + m9_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m9A_O.csv")
# bg.to_csv(["Sequence"] + m10_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m10A_O.csv")
# bg.to_csv(["Sequence"] + m11_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m11A_O.csv")
# bg.to_csv(["Sequence"] + m12_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m12A_O.csv")
# bg.to_csv(["Sequence"] + m13_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m13A_O.csv")
# bg.to_csv(["Sequence"] + m14_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m14A_O.csv")
# bg.to_csv(["Sequence"] + m15_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m15A_O.csv")
# bg.to_csv(["Sequence"] + m16_16m_A_O, "#{LINUX_SAVE_PATH}64M_O/m16A_O.csv")


# bg.to_csv(["Sequence"] + m1_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m1B_O.csv")
# bg.to_csv(["Sequence"] + m2_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m2B_O.csv")
# bg.to_csv(["Sequence"] + m3_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m3B_O.csv")
# bg.to_csv(["Sequence"] + m4_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m4B_O.csv")
# bg.to_csv(["Sequence"] + m5_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m5B_O.csv")
# bg.to_csv(["Sequence"] + m6_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m6B_O.csv")
# bg.to_csv(["Sequence"] + m7_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m7B_O.csv")
# bg.to_csv(["Sequence"] + m8_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m8B_O.csv")
# bg.to_csv(["Sequence"] + m9_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m9B_O.csv")
# bg.to_csv(["Sequence"] + m10_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m10B_O.csv")
# bg.to_csv(["Sequence"] + m11_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m11B_O.csv")
# bg.to_csv(["Sequence"] + m12_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m12B_O.csv")
# bg.to_csv(["Sequence"] + m13_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m13B_O.csv")
# bg.to_csv(["Sequence"] + m14_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m14B_O.csv")
# bg.to_csv(["Sequence"] + m15_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m15B_O.csv")
# bg.to_csv(["Sequence"] + m16_16m_B_O, "#{LINUX_SAVE_PATH}64M_O/m16B_O.csv")

# bg.to_csv(["Sequence"] + m1_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m1C_O.csv")
# bg.to_csv(["Sequence"] + m2_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m2C_O.csv")
# bg.to_csv(["Sequence"] + m3_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m3C_O.csv")
# bg.to_csv(["Sequence"] + m4_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m4C_O.csv")
# bg.to_csv(["Sequence"] + m5_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m5C_O.csv")
# bg.to_csv(["Sequence"] + m6_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m6C_O.csv")
# bg.to_csv(["Sequence"] + m7_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m7C_O.csv")
# bg.to_csv(["Sequence"] + m8_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m8C_O.csv")
# bg.to_csv(["Sequence"] + m9_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m9C_O.csv")
# bg.to_csv(["Sequence"] + m10_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m10C_O.csv")
# bg.to_csv(["Sequence"] + m11_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m11C_O.csv")
# bg.to_csv(["Sequence"] + m12_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m12C_O.csv")
# bg.to_csv(["Sequence"] + m13_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m13C_O.csv")
# bg.to_csv(["Sequence"] + m14_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m14C_O.csv")
# bg.to_csv(["Sequence"] + m15_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m15C_O.csv")
# bg.to_csv(["Sequence"] + m16_16m_C_O, "#{LINUX_SAVE_PATH}64M_O/m16C_O.csv")

# bg.to_csv(["Sequence"] + m1_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m1D_O.csv")
# bg.to_csv(["Sequence"] + m2_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m2D_O.csv")
# bg.to_csv(["Sequence"] + m3_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m3D_O.csv")
# bg.to_csv(["Sequence"] + m4_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m4D_O.csv")
# bg.to_csv(["Sequence"] + m5_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m5D_O.csv")
# bg.to_csv(["Sequence"] + m6_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m6D_O.csv")
# bg.to_csv(["Sequence"] + m7_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m7D_O.csv")
# bg.to_csv(["Sequence"] + m8_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m8D_O.csv")
# bg.to_csv(["Sequence"] + m9_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m9D_O.csv")
# bg.to_csv(["Sequence"] + m10_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m10D_O.csv")
# bg.to_csv(["Sequence"] + m11_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m11D_O.csv")
# bg.to_csv(["Sequence"] + m12_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m12D_O.csv")
# bg.to_csv(["Sequence"] + m13_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m13D_O.csv")
# bg.to_csv(["Sequence"] + m14_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m14D_O.csv")
# bg.to_csv(["Sequence"] + m15_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m15D_O.csv")
# bg.to_csv(["Sequence"] + m16_16m_D_O, "#{LINUX_SAVE_PATH}64M_O/m16D_O.csv")


# # 64M of 4x16M but with 4S4T on the borders

# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s14_score
# s25_4s4b, s25_score = bg.best_sides_out_of("S25", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s25_score
# s36_4s4b, s36_score = bg.best_sides_out_of("S36", 1, [], count=16, number=2, overlap=0.5, godmode=false)
# p s36_score


# m1_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"]
# })

# m2_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S2" => [s25_4s4b[15][0], "B"],
#     "S3" => [s36_4s4b[12][0], "B"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S2" => [s25_4s4b[14][0], "B"],
#     "S3" => [s36_4s4b[13][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S2" => [s25_4s4b[13][0], "B"],
#     "S3" => [s36_4s4b[14][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[12][0], "B"],
#     "S2" => [s25_4s4b[9][0], "B"],
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[13][0], "B"],
#     "S2" => [s25_4s4b[10][0], "B"],
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[14][0], "B"],
#     "S2" => [s25_4s4b[11][0], "B"],
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_A_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[15][0], "B"],
#     "S2" => [s25_4s4b[12][0], "B"],
#     "S3" => [s36_4s4b[15][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # # 16M#B

# m1_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[12][0]), "B"],
# })

# m2_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[15][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[13][0]), "B"],
# })

# m6_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[14][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[14][0]), "B"],
# })

# m10_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[14][0], "B"],
#     "S2" => [s25_4s4b[10][0], "B"],
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[13][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[15][0]), "B"],
# })

# m14_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[12][0], "B"],
#     "S2" => [s25_4s4b[11][0], "B"],
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[15][0], "B"],
#     "S2" => [s25_4s4b[9][0], "B"],
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_B_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[13][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # 16M#C

# m1_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[12][0]), "B"],
# })

# m2_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[13][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[9][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[14][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[10][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S2" => [s25_4s4b[13][0], "B"],
#     "S3" => [s36_4s4b[13][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[15][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[11][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S2" => [s25_4s4b[15][0], "B"],
#     "S3" => [s36_4s4b[14][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_C_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S2" => [s25_4s4b[12][0], "B"],
#     "S3" => [s36_4s4b[15][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_C_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m_C_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_C_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_C_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[12][0], "B"],
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # 16M#D

# m1_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[14][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[12][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[13][0]), "B"]
# })

# m2_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[12][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[10][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[15][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[11][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[13][0]), "B"],
#     "S5" => [bg.complement_side(s25_4s4b[9][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[13][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[14][0]), "B"]
# })

# m6_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" =>to schedule a meeting, I am available anytime this week
# m8_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[15][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[15][0]), "B"]
# })

# m10_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m_D_T = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m_D_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[12][0]), "B"],
#     "S6" => [bg.complement_side(s36_4s4b[12][0]), "B"]
# })

# m14_16m_D_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m_D_T = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m_D_T = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# bg.to_csv(["Sequence"] + m1_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m1A_T.csv")
# bg.to_csv(["Sequence"] + m2_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m2A_T.csv")
# bg.to_csv(["Sequence"] + m3_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m3A_T.csv")
# bg.to_csv(["Sequence"] + m4_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m4A_T.csv")
# bg.to_csv(["Sequence"] + m5_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m5A_T.csv")
# bg.to_csv(["Sequence"] + m6_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m6A_T.csv")
# bg.to_csv(["Sequence"] + m7_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m7A_T.csv")
# bg.to_csv(["Sequence"] + m8_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m8A_T.csv")
# bg.to_csv(["Sequence"] + m9_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m9A_T.csv")
# bg.to_csv(["Sequence"] + m10_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m10A_T.csv")
# bg.to_csv(["Sequence"] + m11_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m11A_T.csv")
# bg.to_csv(["Sequence"] + m12_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m12A_T.csv")
# bg.to_csv(["Sequence"] + m13_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m13A_T.csv")
# bg.to_csv(["Sequence"] + m14_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m14A_T.csv")
# bg.to_csv(["Sequence"] + m15_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m15A_T.csv")
# bg.to_csv(["Sequence"] + m16_16m_A_T, "#{LINUX_SAVE_PATH}64M_T/m16A_T.csv")


# bg.to_csv(["Sequence"] + m1_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m1B_T.csv")
# bg.to_csv(["Sequence"] + m2_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m2B_T.csv")
# bg.to_csv(["Sequence"] + m3_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m3B_T.csv")
# bg.to_csv(["Sequence"] + m4_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m4B_T.csv")
# bg.to_csv(["Sequence"] + m5_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m5B_T.csv")
# bg.to_csv(["Sequence"] + m6_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m6B_T.csv")
# bg.to_csv(["Sequence"] + m7_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m7B_T.csv")
# bg.to_csv(["Sequence"] + m8_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m8B_T.csv")
# bg.to_csv(["Sequence"] + m9_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m9B_T.csv")
# bg.to_csv(["Sequence"] + m10_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m10B_T.csv")
# bg.to_csv(["Sequence"] + m11_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m11B_T.csv")
# bg.to_csv(["Sequence"] + m12_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m12B_T.csv")
# bg.to_csv(["Sequence"] + m13_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m13B_T.csv")
# bg.to_csv(["Sequence"] + m14_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m14B_T.csv")
# bg.to_csv(["Sequence"] + m15_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m15B_T.csv")
# bg.to_csv(["Sequence"] + m16_16m_B_T, "#{LINUX_SAVE_PATH}64M_T/m16B_T.csv")

# bg.to_csv(["Sequence"] + m1_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m1C_T.csv")
# bg.to_csv(["Sequence"] + m2_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m2C_T.csv")
# bg.to_csv(["Sequence"] + m3_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m3C_T.csv")
# bg.to_csv(["Sequence"] + m4_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m4C_T.csv")
# bg.to_csv(["Sequence"] + m5_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m5C_T.csv")
# bg.to_csv(["Sequence"] + m6_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m6C_T.csv")
# bg.to_csv(["Sequence"] + m7_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m7C_T.csv")
# bg.to_csv(["Sequence"] + m8_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m8C_T.csv")
# bg.to_csv(["Sequence"] + m9_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m9C_T.csv")
# bg.to_csv(["Sequence"] + m10_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m10C_T.csv")
# bg.to_csv(["Sequence"] + m11_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m11C_T.csv")
# bg.to_csv(["Sequence"] + m12_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m12C_T.csv")
# bg.to_csv(["Sequence"] + m13_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m13C_T.csv")
# bg.to_csv(["Sequence"] + m14_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m14C_T.csv")
# bg.to_csv(["Sequence"] + m15_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m15C_T.csv")
# bg.to_csv(["Sequence"] + m16_16m_C_T, "#{LINUX_SAVE_PATH}64M_T/m16C_T.csv")

# bg.to_csv(["Sequence"] + m1_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m1D_T.csv")
# bg.to_csv(["Sequence"] + m2_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m2D_T.csv")
# bg.to_csv(["Sequence"] + m3_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m3D_T.csv")
# bg.to_csv(["Sequence"] + m4_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m4D_T.csv")
# bg.to_csv(["Sequence"] + m5_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m5D_T.csv")
# bg.to_csv(["Sequence"] + m6_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m6D_T.csv")
# bg.to_csv(["Sequence"] + m7_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m7D_T.csv")
# bg.to_csv(["Sequence"] + m8_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m8D_T.csv")
# bg.to_csv(["Sequence"] + m9_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m9D_T.csv")
# bg.to_csv(["Sequence"] + m10_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m10D_T.csv")
# bg.to_csv(["Sequence"] + m11_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m11D_T.csv")
# bg.to_csv(["Sequence"] + m12_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m12D_T.csv")
# bg.to_csv(["Sequence"] + m13_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m13D_T.csv")
# bg.to_csv(["Sequence"] + m14_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m14D_T.csv")
# bg.to_csv(["Sequence"] + m15_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m15D_T.csv")
# bg.to_csv(["Sequence"] + m16_16m_D_T, "#{LINUX_SAVE_PATH}64M_T/m16D_T.csv")
# bg.best_sides_out_of("S14", 1, [], count=16, number=2, overlap=0.5, godmode=false)

# 2x16M

# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 5, [], count=12, number=2, overlap=0.25, godmode=false)
# puts "S14 score: #{s14_score}"
# s25_4s4b, s25_score = bg.best_sides_out_of("S25", 25, [], count=9, number=2, overlap=0.25, godmode=false)
# puts "S25 score: #{s25_score}"
# s36_4s4b, s36_score = bg.best_sides_out_of("S36", 5, [], count=12, number=2, overlap=0.25, godmode=false)
# puts "S36 score: #{s36_score}"

# m1_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"]
# })

# m2_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# # Z bonds
# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 5, [], count=12, number=2, overlap=0.25, godmode=false)

# # z_2x16h_tail_bonds = bg.z_bond_sampler(9, 3, "TAIL", 0.34)
# # z_2x16h_head_bonds = bg.z_complement_side(z_2x16h_tail_bonds)

# z_2x16h_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 9, 0.34, 100)
# z_2x16h_head_bonds = bg.z_complement_side(z_2x16h_tail_bonds)
# p z_score

# m1a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m2a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m3a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m4a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m5a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m6a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m7a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m8a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m9a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m10a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m11a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])
# m12a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m13a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m14a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[7]) + bg.add_z_bonds("HEAD", [])
# m15a_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m16a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[8]) + bg.add_z_bonds("HEAD", [])


# m1b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m2b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[0])
# m3b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[1])
# m4b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[2])
# m5b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[3])
# m6b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[4])
# m7b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m8b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m9b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[5])
# m10b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m11b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[6])
# m12b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m13b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m14b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[7])
# m15b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", [])
# m16b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[8])

# m1a_16m = m1_16m + m1a_z_seqs
# m2a_16m = m2_16m + m2a_z_seqs
# m3a_16m = m3_16m + m3a_z_seqs
# m4a_16m = m4_16m + m4a_z_seqs
# m5a_16m = m5_16m + m5a_z_seqs
# m6a_16m = m6_16m + m6a_z_seqs
# m7a_16m = m7_16m + m7a_z_seqs
# m8a_16m = m8_16m + m8a_z_seqs
# m9a_16m = m9_16m + m9a_z_seqs
# m10a_16m = m10_16m + m10a_z_seqs
# m11a_16m = m11_16m + m11a_z_seqs
# m12a_16m = m12_16m + m12a_z_seqs
# m13a_16m = m13_16m + m13a_z_seqs
# m14a_16m = m14_16m + m14a_z_seqs
# m15a_16m = m15_16m + m15a_z_seqs
# m16a_16m = m16_16m + m16a_z_seqs

# m1b_16m = m1_16m + m1b_z_seqs
# m2b_16m = m2_16m + m2b_z_seqs
# m3b_16m = m3_16m + m3b_z_seqs
# m4b_16m = m4_16m + m4b_z_seqs
# m5b_16m = m5_16m + m5b_z_seqs
# m6b_16m = m6_16m + m6b_z_seqs
# m7b_16m = m7_16m + m7b_z_seqs
# m8b_16m = m8_16m + m8b_z_seqs
# m9b_16m = m9_16m + m9b_z_seqs
# m10b_16m = m10_16m + m10b_z_seqs
# m11b_16m = m11_16m + m11b_z_seqs
# m12b_16m = m12_16m + m12b_z_seqs
# m13b_16m = m13_16m + m13b_z_seqs
# m14b_16m = m14_16m + m14b_z_seqs
# m15b_16m = m15_16m + m15b_z_seqs
# m16b_16m = m16_16m + m16b_z_seqs


# bg.to_csv(["Sequence"] + m1a_16m, "#{LINUX_SAVE_PATH}2x16M/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_16m, "#{LINUX_SAVE_PATH}2x16M/m2a.csv")
# bg.to_csv(["Sequence"] + m3a_16m, "#{LINUX_SAVE_PATH}2x16M/m3a.csv")
# bg.to_csv(["Sequence"] + m4a_16m, "#{LINUX_SAVE_PATH}2x16M/m4a.csv")
# bg.to_csv(["Sequence"] + m5a_16m, "#{LINUX_SAVE_PATH}2x16M/m5a.csv")
# bg.to_csv(["Sequence"] + m6a_16m, "#{LINUX_SAVE_PATH}2x16M/m6a.csv")
# bg.to_csv(["Sequence"] + m7a_16m, "#{LINUX_SAVE_PATH}2x16M/m7a.csv")
# bg.to_csv(["Sequence"] + m8a_16m, "#{LINUX_SAVE_PATH}2x16M/m8a.csv")
# bg.to_csv(["Sequence"] + m9a_16m, "#{LINUX_SAVE_PATH}2x16M/m9a.csv")
# bg.to_csv(["Sequence"] + m10a_16m, "#{LINUX_SAVE_PATH}2x16M/m10a.csv")
# bg.to_csv(["Sequence"] + m11a_16m, "#{LINUX_SAVE_PATH}2x16M/m11a.csv")
# bg.to_csv(["Sequence"] + m12a_16m, "#{LINUX_SAVE_PATH}2x16M/m12a.csv")
# bg.to_csv(["Sequence"] + m13a_16m, "#{LINUX_SAVE_PATH}2x16M/m13a.csv")
# bg.to_csv(["Sequence"] + m14a_16m, "#{LINUX_SAVE_PATH}2x16M/m14a.csv")
# bg.to_csv(["Sequence"] + m15a_16m, "#{LINUX_SAVE_PATH}2x16M/m15a.csv")
# bg.to_csv(["Sequence"] + m16a_16m, "#{LINUX_SAVE_PATH}2x16M/m16a.csv")

# bg.to_csv(["Sequence"] + m1b_16m, "#{LINUX_SAVE_PATH}2x16M/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_16m, "#{LINUX_SAVE_PATH}2x16M/m2b.csv")
# bg.to_csv(["Sequence"] + m3b_16m, "#{LINUX_SAVE_PATH}2x16M/m3b.csv")
# bg.to_csv(["Sequence"] + m4b_16m, "#{LINUX_SAVE_PATH}2x16M/m4b.csv")
# bg.to_csv(["Sequence"] + m5b_16m, "#{LINUX_SAVE_PATH}2x16M/m5b.csv")
# bg.to_csv(["Sequence"] + m6b_16m, "#{LINUX_SAVE_PATH}2x16M/m6b.csv")
# bg.to_csv(["Sequence"] + m7b_16m, "#{LINUX_SAVE_PATH}2x16M/m7b.csv")
# bg.to_csv(["Sequence"] + m8b_16m, "#{LINUX_SAVE_PATH}2x16M/m8b.csv")
# bg.to_csv(["Sequence"] + m9b_16m, "#{LINUX_SAVE_PATH}2x16M/m9b.csv")
# bg.to_csv(["Sequence"] + m10b_16m, "#{LINUX_SAVE_PATH}2x16M/m10b.csv")
# bg.to_csv(["Sequence"] + m11b_16m, "#{LINUX_SAVE_PATH}2x16M/m11b.csv")
# bg.to_csv(["Sequence"] + m12b_16m, "#{LINUX_SAVE_PATH}2x16M/m12b.csv")
# bg.to_csv(["Sequence"] + m13b_16m, "#{LINUX_SAVE_PATH}2x16M/m13b.csv")
# bg.to_csv(["Sequence"] + m14b_16m, "#{LINUX_SAVE_PATH}2x16M/m14b.csv")
# bg.to_csv(["Sequence"] + m15b_16m, "#{LINUX_SAVE_PATH}2x16M/m15b.csv")
# bg.to_csv(["Sequence"] + m16b_16m, "#{LINUX_SAVE_PATH}2x16M/m16b.csv")


# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 1, [], count=2, number=2, overlap=0.0, godmode=false)
# p s14_4s4b
# z_2x2_4h_tail_bonds = bg.z_bond_sampler(4, 2, 0.0)
# z_2x2_4h_head_bonds = bg.z_complement_side(z_2x2_4h_tail_bonds)
# p z_2x2_4h_tail_bonds

# m1a_2x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"]
# })

# m2a_2x2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m1b_2x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"]
# })

# m2b_2x2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"]
# })

# m1a_z_seqs = bg.add_z_bonds("TAIL", z_2x2_4h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z_seqs = bg.add_z_bonds("TAIL", z_2x2_4h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])

# m1b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x2_4h_head_bonds[0])
# m2b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x2_4h_head_bonds[1])

# m1a_2x2 += m1a_z_seqs
# m2a_2x2 += m2a_z_seqs

# m1b_2x2 += m1b_z_seqs
# m2b_2x2 += m2b_z_seqs

# bg.to_csv(["Sequence"] + m1a_2x2, "#{LINUX_SAVE_PATH}2x2_4H/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_2x2, "#{LINUX_SAVE_PATH}2x2_4H/m2a.csv")

# bg.to_csv(["Sequence"] + m1b_2x2, "#{LINUX_SAVE_PATH}2x2_4H/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_2x2, "#{LINUX_SAVE_PATH}2x2_4H/m2b.csv")

# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 1, [], count=2, number=2, overlap=0.0, godmode=false)
# s25_4s4b, s25_score = bg.best_sides_out_of("S25", 1, [], count=2, number=2, overlap=0.0, godmode=false)
# s36_4s4b, s36_score = bg.best_sides_out_of("S36", 1, [], count=2, number=2, overlap=0.0, godmode=false)

# p s14_4s4b
# p s25_4s4b
# p s36_4s4b

# z_2x2_4h_tail_bonds = bg.z_bond_sampler(4, 3, 0.0)
# z_2x2_4h_head_bonds = bg.z_complement_side(z_2x2_4h_tail_bonds)
# p z_2x2_4h_tail_bonds

# m1a_2x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"]
# })

# m2a_2x2 = bg.sequence_generator({
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m3a_2x2 = bg.sequence_generator({
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# # Layer 2

# m1b_2x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"]
# })

# m2b_2x2 = bg.sequence_generator({
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"]
# })

# m3b_2x2 = bg.sequence_generator({
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })
    

# m1a_z_seqs = bg.add_z_bonds("TAIL", z_2x2_4h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z_seqs = bg.add_z_bonds("TAIL", z_2x2_4h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z_seqs = bg.add_z_bonds("TAIL", z_2x2_4h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])

# m1b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x2_4h_head_bonds[0])
# m2b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x2_4h_head_bonds[1])
# m3b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x2_4h_head_bonds[2])

# m1a_2x2 += m1a_z_seqs
# m2a_2x2 += m2a_z_seqs
# m3a_2x2 += m3a_z_seqs

# m1b_2x2 += m1b_z_seqs
# m2b_2x2 += m2b_z_seqs
# m3b_2x2 += m3b_z_seqs

# bg.to_csv(["Sequence"] + m1a_2x2, "#{LINUX_SAVE_PATH}2x3_4H/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_2x2, "#{LINUX_SAVE_PATH}2x3_4H/m2a.csv")
# bg.to_csv(["Sequence"] + m3a_2x2, "#{LINUX_SAVE_PATH}2x3_4H/m3a.csv")

# bg.to_csv(["Sequence"] + m1b_2x2, "#{LINUX_SAVE_PATH}2x3_4H/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_2x2, "#{LINUX_SAVE_PATH}2x3_4H/m2b.csv")
# bg.to_csv(["Sequence"] + m3b_2x2, "#{LINUX_SAVE_PATH}2x3_4H/m3b.csv")


# s14_4s4b, s14_score = bg.best_sides_out_of("S14", 50, [], count=10, number=2, overlap=0.25, godmode=false)
# p "S14 score #{s14_score}"
# s25_4s4b, s25_score = bg.best_sides_out_of("S25", 50, [], count=10, number=2, overlap=0.25, godmode=false)
# p "S25 score #{s25_score}"
# s36_4s4b, s36_score = bg.best_sides_out_of("S36", 50, [], count=10, number=2, overlap=0.25, godmode=false)
# p "S36 score #{s36_score}"

# z_5x6_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 24, 0.51, 1)
# z_5x6_head_bonds = bg.z_complement_side(z_5x6_tail_bonds)
# p z_score

# m1a_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"]
# })

# m2a_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
# })

# m3a_5x6 = bg.sequence_generator({
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
# })

# m4a_5x6 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m5a_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
# })

# m6a_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# # L2
# m1b_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[2+0][0], "BS"],
#     "S3" => [s36_4s4b[2+1][0], "BS"]
# })

# m2b_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[2+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2+0][0]), "BS"],
# })

# m3b_5x6 = bg.sequence_generator({
#     "S3" => [s36_4s4b[2+0][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2+0][0]), "BS"],
# })

# m4b_5x6 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[2+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2+0][0]), "BS"]
# })

# m5b_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[2+1][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2+1][0]), "BS"],
# })

# m6b_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[2+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2+1][0]), "BS"]
# })
# # L3
# m1c_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[4+0][0], "BS"],
#     "S3" => [s36_4s4b[4+1][0], "BS"]
# })

# m2c_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[4+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4+0][0]), "BS"],
# })

# m3c_5x6 = bg.sequence_generator({
#     "S3" => [s36_4s4b[4+0][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4+0][0]), "BS"],
# })

# m4c_5x6 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4+0][0]), "BS"]
# })

# m5c_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[4+1][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4+1][0]), "BS"],
# })

# m6c_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4+1][0]), "BS"]
# })
# # L4
# m1d_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[6+0][0], "BS"],
#     "S3" => [s36_4s4b[6+1][0], "BS"]
# })

# m2d_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[6+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6+0][0]), "BS"],
# })

# m3d_5x6 = bg.sequence_generator({
#     "S3" => [s36_4s4b[6+0][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6+0][0]), "BS"],
# })

# m4d_5x6 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[6+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6+0][0]), "BS"]
# })

# m5d_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[6+1][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6+1][0]), "BS"],
# })

# m6d_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[6+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6+1][0]), "BS"]
# })
# # L5
# m1e_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[8+0][0], "BS"],
#     "S3" => [s36_4s4b[8+1][0], "BS"]
# })

# m2e_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[8+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8+0][0]), "BS"],
# })

# m3e_5x6 = bg.sequence_generator({
#     "S3" => [s36_4s4b[8+0][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8+0][0]), "BS"],
# })

# m4e_5x6 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[8+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8+0][0]), "BS"]
# })

# m5e_5x6 = bg.sequence_generator({
#     "S1" => [s14_4s4b[8+1][0], "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8+1][0]), "BS"],
# })

# m6e_5x6 = bg.sequence_generator({
#     "S2" => [s25_4s4b[8+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8+1][0]), "BS"]
# })

# ### Save To Csv

# m1a_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])

# m1b_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[6]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[0])
# m2b_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[7]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[1])
# m3b_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[8]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[2])
# m4b_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[9]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[3])
# m5b_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[10]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[4])
# m6b_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[11]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[5])

# m1c_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[12]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[6])
# m2c_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[13]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[7])
# m3c_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[14]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[8])
# m4c_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[15]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[9])
# m5c_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[16]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[10])
# m6c_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[17]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[11])

# m1d_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[18]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[12])
# m2d_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[19]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[13])
# m3d_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[20]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[14])
# m4d_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[21]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[15])
# m5d_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[22]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[16])
# m6d_z_seqs = bg.add_z_bonds("TAIL", z_5x6_tail_bonds[23]) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[17])

# m1e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[18])
# m2e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[19])
# m3e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[20])
# m4e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[21])
# m5e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[22])
# m6e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_5x6_head_bonds[23])


# m1a_5x6 += m1a_z_seqs
# m2a_5x6 += m2a_z_seqs
# m3a_5x6 += m3a_z_seqs
# m4a_5x6 += m4a_z_seqs
# m5a_5x6 += m5a_z_seqs
# m6a_5x6 += m6a_z_seqs

# m1b_5x6 += m1b_z_seqs
# m2b_5x6 += m2b_z_seqs
# m3b_5x6 += m3b_z_seqs
# m4b_5x6 += m4b_z_seqs
# m5b_5x6 += m5b_z_seqs
# m6b_5x6 += m6b_z_seqs

# m1c_5x6 += m1c_z_seqs
# m2c_5x6 += m2c_z_seqs
# m3c_5x6 += m3c_z_seqs
# m4c_5x6 += m4c_z_seqs
# m5c_5x6 += m5c_z_seqs
# m6c_5x6 += m6c_z_seqs

# m1d_5x6 += m1d_z_seqs
# m2d_5x6 += m2d_z_seqs
# m3d_5x6 += m3d_z_seqs
# m4d_5x6 += m4d_z_seqs
# m5d_5x6 += m5d_z_seqs
# m6d_5x6 += m6d_z_seqs

# m1e_5x6 += m1e_z_seqs
# m2e_5x6 += m2e_z_seqs
# m3e_5x6 += m3e_z_seqs
# m4e_5x6 += m4e_z_seqs
# m5e_5x6 += m5e_z_seqs
# m6e_5x6 += m6e_z_seqs

# bg.to_csv(["Sequence"] + m1a_5x6, "#{LINUX_SAVE_PATH}5x6M/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_5x6, "#{LINUX_SAVE_PATH}5x6M/m2a.csv")
# bg.to_csv(["Sequence"] + m3a_5x6, "#{LINUX_SAVE_PATH}5x6M/m3a.csv")
# bg.to_csv(["Sequence"] + m4a_5x6, "#{LINUX_SAVE_PATH}5x6M/m4a.csv")
# bg.to_csv(["Sequence"] + m5a_5x6, "#{LINUX_SAVE_PATH}5x6M/m5a.csv")
# bg.to_csv(["Sequence"] + m6a_5x6, "#{LINUX_SAVE_PATH}5x6M/m6a.csv")

# bg.to_csv(["Sequence"] + m1b_5x6, "#{LINUX_SAVE_PATH}5x6M/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_5x6, "#{LINUX_SAVE_PATH}5x6M/m2b.csv")
# bg.to_csv(["Sequence"] + m3b_5x6, "#{LINUX_SAVE_PATH}5x6M/m3b.csv")
# bg.to_csv(["Sequence"] + m4b_5x6, "#{LINUX_SAVE_PATH}5x6M/m4b.csv")
# bg.to_csv(["Sequence"] + m5b_5x6, "#{LINUX_SAVE_PATH}5x6M/m5b.csv")
# bg.to_csv(["Sequence"] + m6b_5x6, "#{LINUX_SAVE_PATH}5x6M/m6b.csv")

# bg.to_csv(["Sequence"] + m1c_5x6, "#{LINUX_SAVE_PATH}5x6M/m1c.csv")
# bg.to_csv(["Sequence"] + m2c_5x6, "#{LINUX_SAVE_PATH}5x6M/m2c.csv")
# bg.to_csv(["Sequence"] + m3c_5x6, "#{LINUX_SAVE_PATH}5x6M/m3c.csv")
# bg.to_csv(["Sequence"] + m4c_5x6, "#{LINUX_SAVE_PATH}5x6M/m4c.csv")
# bg.to_csv(["Sequence"] + m5c_5x6, "#{LINUX_SAVE_PATH}5x6M/m5c.csv")
# bg.to_csv(["Sequence"] + m6c_5x6, "#{LINUX_SAVE_PATH}5x6M/m6c.csv")

# bg.to_csv(["Sequence"] + m1d_5x6, "#{LINUX_SAVE_PATH}5x6M/m1d.csv")
# bg.to_csv(["Sequence"] + m2d_5x6, "#{LINUX_SAVE_PATH}5x6M/m2d.csv")
# bg.to_csv(["Sequence"] + m3d_5x6, "#{LINUX_SAVE_PATH}5x6M/m3d.csv")
# bg.to_csv(["Sequence"] + m4d_5x6, "#{LINUX_SAVE_PATH}5x6M/m4d.csv")
# bg.to_csv(["Sequence"] + m5d_5x6, "#{LINUX_SAVE_PATH}5x6M/m5d.csv")
# bg.to_csv(["Sequence"] + m6d_5x6, "#{LINUX_SAVE_PATH}5x6M/m6d.csv")

# bg.to_csv(["Sequence"] + m1e_5x6, "#{LINUX_SAVE_PATH}5x6M/m1e.csv")
# bg.to_csv(["Sequence"] + m2e_5x6, "#{LINUX_SAVE_PATH}5x6M/m2e.csv")
# bg.to_csv(["Sequence"] + m3e_5x6, "#{LINUX_SAVE_PATH}5x6M/m3e.csv")
# bg.to_csv(["Sequence"] + m4e_5x6, "#{LINUX_SAVE_PATH}5x6M/m4e.csv")
# bg.to_csv(["Sequence"] + m5e_5x6, "#{LINUX_SAVE_PATH}5x6M/m5e.csv")
# bg.to_csv(["Sequence"] + m6e_5x6, "#{LINUX_SAVE_PATH}5x6M/m6e.csv")

# 2x16M in One-POT
bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 5, [], count=12, number=2, overlap=0.25, godmode=false)
# puts "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 25, [], count=9, number=2, overlap=0.25, godmode=false)
# puts "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 5, [], count=12, number=2, overlap=0.25, godmode=false)
# puts "Handle S36 score: #{s36_handles_score}"


# s14_hinges, s14_hinges_score = bg.best_sides_out_of("S14", "hinges", 50, [], count=8, number=2, overlap=0.5, godmode=false)
# puts "Hinge S14 score: #{s14_hinges_score}"
# s25_hinges, s25_hinges_score = bg.best_sides_out_of("S25", "hinges", 50, [], count=13, number=2, overlap=0.5, godmode=false)
# puts "Hinge S25 score: #{s25_hinges_score}"
# s36_hinges, s36_hinges_score = bg.best_sides_out_of("S36", "hinges", 50, [], count=8, number=2, overlap=0.5, godmode=false)
# puts "Hinge S36 score: #{s36_hinges_score}"


# p "Sample S14 handle: #{s14_handles[0]} and hinge: #{s14_hinges[0]}"
# p "Sample S25 handle: #{s25_handles[0]} and hinge: #{s25_hinges[0]}"
# p "Sample S36 handle: #{s36_handles[0]} and hinge: #{s36_hinges[0]}"


# m1_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_hinges[0][0], "B"], # HINGE
#     "S3" => [s36_hinges[0][0], "B"],  # HINGE
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[5][0], "BS"],
#     "S2" => [s25_handles[4][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m7_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[6][0], "BS"],
#     "S2" => [s25_handles[5][0], "BS"],
#     "S3" => [s36_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# m8_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[7][0], "BS"],
#     "S2" => [s25_hinges[1][0], "B"],  # HINGE
#     "S3" => [s36_hinges[1][0], "B"],  # HINGE
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[5][0]), "BS"]
# })

# m9_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[8][0], "BS"],
#     "S2" => [s25_handles[6][0], "BS"],
#     "S3" => [s36_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"]
# })

# m10_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[9][0], "BS"],
#     "S2" => [s25_handles[7][0], "BS"],
#     "S3" => [s36_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[6][0]), "BS"]
# })

# m11_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[10][0], "BS"],
#     "S2" => [s25_handles[8][0], "BS"],
#     "S3" => [s36_handles[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[7][0]), "BS"]
# })

# m12_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[11][0], "BS"],
#     "S2" => [s25_hinges[2][0], "B"],  # HINGE
#     "S3" => [s36_hinges[2][0], "B"],  # HINGE
#     "S4" => [bg.complement_side(s14_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8][0]), "BS"]
# })

# m13_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[0][0], "B"],  # HINGE
#     "S2" => [s25_hinges[3][0], "B"],  # HINGE
#     "S3" => [s36_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8][0]), "BS"]
# })

# m14_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[1][0], "B"],  # HINGE
#     "S2" => [s25_hinges[4][0], "B"],  # HINGE
#     "S3" => [s36_handles[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[9][0]), "BS"]
# })

# m15_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[2][0], "B"],  # HINGE
#     "S2" => [s25_hinges[5][0], "B"],  # HINGE
#     "S3" => [s36_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[10][0]), "BS"]
# })

# m16_16m_A_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[3][0], "B"],  # HINGE
#     "S2" => [s25_hinges[6][0], "B"],  # HINGE
#     "S3" => [s36_hinges[3][0], "B"],  # HINGE
#     "S4" => [bg.complement_side(s14_handles[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[11][0]), "BS"]
# })

# # 16M#B

# m1_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_hinges[0][0]), "B"],
# })

# m2_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[0][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[1][0]), "B"],
# })

# m6_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[5][0], "BS"],
#     "S2" => [s25_handles[4][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m7_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[6][0], "BS"],
#     "S2" => [s25_handles[5][0], "BS"],
#     "S3" => [s36_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# m8_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[5][0]), "BS"]
# })

# m9_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[8][0], "BS"],
#     "S2" => [s25_handles[6][0], "BS"],
#     "S3" => [s36_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[1][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[2][0]), "B"],
# })

# m10_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[9][0], "BS"],
#     "S2" => [s25_handles[7][0], "BS"],
#     "S3" => [s36_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[6][0]), "BS"]
# })

# m11_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[10][0], "BS"],
#     "S2" => [s25_handles[8][0], "BS"],
#     "S3" => [s36_handles[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[7][0]), "BS"]
# })

# m12_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8][0]), "BS"]
# })

# m13_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[4][0], "B"],
#     "S2" => [s25_hinges[7][0], "B"],
#     "S3" => [s36_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[2][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[3][0]), "B"],
# })

# m14_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[5][0], "B"],
#     "S2" => [s25_hinges[8][0], "B"],
#     "S3" => [s36_handles[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[9][0]), "BS"]
# })

# m15_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[6][0], "B"],
#     "S2" => [s25_hinges[9][0], "B"],
#     "S3" => [s36_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[10][0]), "BS"]
# })

# m16_16m_B_HiHa = bg.sequence_generator({
#     "S1" => [s14_hinges[7][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[11][0]), "BS"]
# })

# # 16M#C

# m1_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[0][0]), "B"],
# })

# m2_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[1][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[3][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[2][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[4][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_hinges[10][0], "B"],
#     "S3" => [s36_hinges[4][0], "B"],
#     "S4" => [bg.complement_side(s14_hinges[3][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[5][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[5][0], "BS"],
#     "S2" => [s25_handles[4][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m7_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[6][0], "BS"],
#     "S2" => [s25_handles[5][0], "BS"],
#     "S3" => [s36_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# m8_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[7][0], "BS"],
#     "S2" => [s25_hinges[11][0], "B"],
#     "S3" => [s36_hinges[5][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[5][0]), "BS"]
# })

# m9_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[8][0], "BS"],
#     "S2" => [s25_handles[6][0], "BS"],
#     "S3" => [s36_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"]
# })

# m10_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[9][0], "BS"],
#     "S2" => [s25_handles[7][0], "BS"],
#     "S3" => [s36_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[6][0]), "BS"]
# })

# m11_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[10][0], "BS"],
#     "S2" => [s25_handles[8][0], "BS"],
#     "S3" => [s36_handles[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[7][0]), "BS"]
# })

# m12_16m_C_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[11][0], "BS"],
#     "S2" => [s25_hinges[12][0], "B"],
#     "S3" => [s36_hinges[6][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8][0]), "BS"]
# })

# m13_16m_C_HiHa = bg.sequence_generator({
#     "S3" => [s36_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8][0]), "BS"]
# })

# m14_16m_C_HiHa = bg.sequence_generator({
#     "S3" => [s36_handles[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[9][0]), "BS"]
# })

# m15_16m_C_HiHa = bg.sequence_generator({
#     "S3" => [s36_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[10][0]), "BS"]
# })

# m16_16m_C_HiHa = bg.sequence_generator({
#     "S3" => [s36_hinges[7][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[11][0]), "BS"]
# })

# # 16M#D

# m1_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[4][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[6][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[4][0]), "B"]
# })

# m2_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[5][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[7][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[6][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[8][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[7][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[9][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[10][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[5][0]), "B"]
# })

# m6_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[5][0], "BS"],
#     "S2" => [s25_handles[4][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m7_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[6][0], "BS"],
#     "S2" => [s25_handles[5][0], "BS"],
#     "S3" => [s36_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# m8_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[5][0]), "BS"]
# })

# m9_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[8][0], "BS"],
#     "S2" => [s25_handles[6][0], "BS"],
#     "S3" => [s36_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[11][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[6][0]), "B"]
# })

# m10_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[9][0], "BS"],
#     "S2" => [s25_handles[7][0], "BS"],
#     "S3" => [s36_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[6][0]), "BS"]
# })

# m11_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[10][0], "BS"],
#     "S2" => [s25_handles[8][0], "BS"],
#     "S3" => [s36_handles[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[7][0]), "BS"]
# })

# m12_16m_D_HiHa = bg.sequence_generator({
#     "S1" => [s14_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8][0]), "BS"]
# })

# m13_16m_D_HiHa = bg.sequence_generator({
#     "S3" => [s36_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[12][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[7][0]), "B"]
# })

# m14_16m_D_HiHa = bg.sequence_generator({
#     "S3" => [s36_handles[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[9][0]), "BS"]
# })

# m15_16m_D_HiHa = bg.sequence_generator({
#     "S3" => [s36_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[10][0]), "BS"]
# })

# m16_16m_D_HiHa = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[11][0]), "BS"]
# })

# LINUX_PATH = "/home/spetrosyan/Desktop/hexoland/sequences/"

# bg.to_csv(["Sequence"] + m1_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m1A_HiHa.csv")
# bg.to_csv(["Sequence"] + m2_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m2A_HiHa.csv")
# bg.to_csv(["Sequence"] + m3_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m3A_HiHa.csv")
# bg.to_csv(["Sequence"] + m4_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m4A_HiHa.csv")
# bg.to_csv(["Sequence"] + m5_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m5A_HiHa.csv")
# bg.to_csv(["Sequence"] + m6_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m6A_HiHa.csv")
# bg.to_csv(["Sequence"] + m7_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m7A_HiHa.csv")
# bg.to_csv(["Sequence"] + m8_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m8A_HiHa.csv")
# bg.to_csv(["Sequence"] + m9_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m9A_HiHa.csv")
# bg.to_csv(["Sequence"] + m10_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m10A_HiHa.csv")
# bg.to_csv(["Sequence"] + m11_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m11A_HiHa.csv")
# bg.to_csv(["Sequence"] + m12_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m12A_HiHa.csv")
# bg.to_csv(["Sequence"] + m13_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m13A_HiHa.csv")
# bg.to_csv(["Sequence"] + m14_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m14A_HiHa.csv")
# bg.to_csv(["Sequence"] + m15_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m15A_HiHa.csv")
# bg.to_csv(["Sequence"] + m16_16m_A_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m16A_HiHa.csv")

# bg.to_csv(["Sequence"] + m1_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m1B_HiHa.csv")
# bg.to_csv(["Sequence"] + m2_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m2B_HiHa.csv")
# bg.to_csv(["Sequence"] + m3_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m3B_HiHa.csv")
# bg.to_csv(["Sequence"] + m4_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m4B_HiHa.csv")
# bg.to_csv(["Sequence"] + m5_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m5B_HiHa.csv")
# bg.to_csv(["Sequence"] + m6_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m6B_HiHa.csv")
# bg.to_csv(["Sequence"] + m7_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m7B_HiHa.csv")
# bg.to_csv(["Sequence"] + m8_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m8B_HiHa.csv")
# bg.to_csv(["Sequence"] + m9_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m9B_HiHa.csv")
# bg.to_csv(["Sequence"] + m10_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m10B_HiHa.csv")
# bg.to_csv(["Sequence"] + m11_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m11B_HiHa.csv")
# bg.to_csv(["Sequence"] + m12_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m12B_HiHa.csv")
# bg.to_csv(["Sequence"] + m13_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m13B_HiHa.csv")
# bg.to_csv(["Sequence"] + m14_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m14B_HiHa.csv")
# bg.to_csv(["Sequence"] + m15_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m15B_HiHa.csv")
# bg.to_csv(["Sequence"] + m16_16m_B_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m16B_HiHa.csv")

# bg.to_csv(["Sequence"] + m1_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m1C_HiHa.csv")
# bg.to_csv(["Sequence"] + m2_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m2C_HiHa.csv")
# bg.to_csv(["Sequence"] + m3_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m3C_HiHa.csv")
# bg.to_csv(["Sequence"] + m4_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m4C_HiHa.csv")
# bg.to_csv(["Sequence"] + m5_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m5C_HiHa.csv")
# bg.to_csv(["Sequence"] + m6_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m6C_HiHa.csv")
# bg.to_csv(["Sequence"] + m7_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m7C_HiHa.csv")
# bg.to_csv(["Sequence"] + m8_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m8C_HiHa.csv")
# bg.to_csv(["Sequence"] + m9_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m9C_HiHa.csv")
# bg.to_csv(["Sequence"] + m10_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m10C_HiHa.csv")
# bg.to_csv(["Sequence"] + m11_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m11C_HiHa.csv")
# bg.to_csv(["Sequence"] + m12_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m12C_HiHa.csv")
# bg.to_csv(["Sequence"] + m13_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m13C_HiHa.csv")
# bg.to_csv(["Sequence"] + m14_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m14C_HiHa.csv")
# bg.to_csv(["Sequence"] + m15_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m15C_HiHa.csv")
# bg.to_csv(["Sequence"] + m16_16m_C_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m16C_HiHa.csv")

# bg.to_csv(["Sequence"] + m1_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m1D_HiHa.csv")
# bg.to_csv(["Sequence"] + m2_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m2D_HiHa.csv")
# bg.to_csv(["Sequence"] + m3_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m3D_HiHa.csv")
# bg.to_csv(["Sequence"] + m4_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m4D_HiHa.csv")
# bg.to_csv(["Sequence"] + m5_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m5D_HiHa.csv")
# bg.to_csv(["Sequence"] + m6_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m6D_HiHa.csv")
# bg.to_csv(["Sequence"] + m7_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m7D_HiHa.csv")
# bg.to_csv(["Sequence"] + m8_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m8D_HiHa.csv")
# bg.to_csv(["Sequence"] + m9_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m9D_HiHa.csv")
# bg.to_csv(["Sequence"] + m10_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m10D_HiHa.csv")
# bg.to_csv(["Sequence"] + m11_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m11D_HiHa.csv")
# bg.to_csv(["Sequence"] + m12_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m12D_HiHa.csv")
# bg.to_csv(["Sequence"] + m13_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m13D_HiHa.csv")
# bg.to_csv(["Sequence"] + m14_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m14D_HiHa.csv")
# bg.to_csv(["Sequence"] + m15_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m15D_HiHa.csv")
# bg.to_csv(["Sequence"] + m16_16m_D_HiHa, "#{LINUX_PATH}64M_HiHa_V2/m16D_HiHa.csv")

# bg = BondGenerator.new

# s14_4s4b, s14_handles_score = bg.best_sides_out_of("S14", "handles", 150, [], count=5, number=2, overlap=0.25, godmode=false)
# puts "Handle S14 score: #{s14_handles_score}"
# s25_4s4b, s25_handles_score = bg.best_sides_out_of("S25", "handles", 25, [], count=9, number=2, overlap=0.25, godmode=false)
# puts "Handle S25 score: #{s25_handles_score}"
# s36_4s4b, s36_handles_score = bg.best_sides_out_of("S36", "handles", 5, [], count=12, number=2, overlap=0.25, godmode=false)
# puts "Handle S36 score: #{s36_handles_score}"

# # p "Sample S14 handle: #{s14_handles[0]} and hinge: #{s14_hinges[0]}"
# # p "Sample S25 handle: #{s25_handles[0]} and hinge: #{s25_hinges[0]}"
# # p "Sample S36 handle: #{s36_handles[0]} and hinge: #{s36_hinges[0]}"

# m1_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"]
# })

# m2_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"],
#     "S2" => [s25_4s4b[3][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m6_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[5][0], "BS"],
#     "S2" => [s25_4s4b[4][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[6][0], "BS"],
#     "S2" => [s25_4s4b[5][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# m9_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[8][0], "BS"],
#     "S2" => [s25_4s4b[6][0], "BS"],
#     "S3" => [s36_4s4b[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# m10_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[9][0], "BS"],
#     "S2" => [s25_4s4b[7][0], "BS"],
#     "S3" => [s36_4s4b[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[6][0]), "BS"]
# })

# m11_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[10][0], "BS"],
#     "S2" => [s25_4s4b[8][0], "BS"],
#     "S3" => [s36_4s4b[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[7][0]), "BS"]
# })

# m12_16m = bg.sequence_generator({
#     "S1" => [s14_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[8][0]), "BS"]
# })

# m13_16m = bg.sequence_generator({
#     "S3" => [s36_4s4b[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[8][0]), "BS"]
# })

# m14_16m = bg.sequence_generator({
#     "S3" => [s36_4s4b[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[9][0]), "BS"]
# })

# m15_16m = bg.sequence_generator({
#     "S3" => [s36_4s4b[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[10][0]), "BS"]
# })

# m16_16m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[11][0]), "BS"]
# })

# Z bonds
# bg = BondGenerator.new

# s14_4s4b, s14_handles_score = bg.best_sides_out_of("S14", "handles", 150, [], count=5, number=2, overlap=0.25, godmode=false)
# puts "Handle S14 score: #{s14_handles_score}"
# z_2x16h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 8, 0.25, 100)
# p z_2x16h_tail_bonds
# p z_score
# z_2x16h_head_bonds = bg.z_complement_side(z_2x16h_tail_bonds)
# p z_2x16h_head_bonds
# p "Z score is: #{z_score}"
# p z_2x16h_tail_bonds
# p z_2x16h_head_bonds

# m01a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m02a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m03a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m04a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m05a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m06a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m07a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])
# m08a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[7]) + bg.add_z_bonds("HEAD", [])
# m09a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[8]) + bg.add_z_bonds("HEAD", [])
# m10a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[9]) + bg.add_z_bonds("HEAD", [])
# m11a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[10]) + bg.add_z_bonds("HEAD", [])
# m12a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[11]) + bg.add_z_bonds("HEAD", [])
# m13a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[12]) + bg.add_z_bonds("HEAD", [])
# m14a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[13]) + bg.add_z_bonds("HEAD", [])
# m15a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[14]) + bg.add_z_bonds("HEAD", [])
# m16a_z_seqs = bg.add_z_bonds("TAIL", z_2x16h_tail_bonds[15]) + bg.add_z_bonds("HEAD", [])


# m01b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[0])
# m02b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[1])
# m03b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[2])
# m04b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[3])
# m05b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[4])
# m06b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[5])
# m07b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[6])
# m08b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[7])
# m09b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[8])
# m10b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[9])
# m11b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[10])
# m12b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[11])
# m13b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[12])
# m14b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[13])
# m15b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[14])
# m16b_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_2x16h_head_bonds[15])

# m01a_16m = m1_16m + m01a_z_seqs
# m02a_16m = m2_16m + m02a_z_seqs
# m03a_16m = m3_16m + m03a_z_seqs
# m04a_16m = m4_16m + m04a_z_seqs
# m05a_16m = m5_16m + m05a_z_seqs
# m06a_16m = m6_16m + m06a_z_seqs
# m07a_16m = m7_16m + m07a_z_seqs
# m08a_16m = m8_16m + m08a_z_seqs
# m09a_16m = m9_16m + m09a_z_seqs
# m10a_16m = m10_16m + m10a_z_seqs
# m11a_16m = m11_16m + m11a_z_seqs
# m12a_16m = m12_16m + m12a_z_seqs
# m13a_16m = m13_16m + m13a_z_seqs
# m14a_16m = m14_16m + m14a_z_seqs
# m15a_16m = m15_16m + m15a_z_seqs
# m16a_16m = m16_16m + m16a_z_seqs

# m01b_16m = m1_16m + m01b_z_seqs
# m02b_16m = m2_16m + m02b_z_seqs
# m03b_16m = m3_16m + m03b_z_seqs
# m04b_16m = m4_16m + m04b_z_seqs
# m05b_16m = m5_16m + m05b_z_seqs
# m06b_16m = m6_16m + m06b_z_seqs
# m07b_16m = m7_16m + m07b_z_seqs
# m08b_16m = m8_16m + m08b_z_seqs
# m09b_16m = m9_16m + m09b_z_seqs
# m10b_16m = m10_16m + m10b_z_seqs
# m11b_16m = m11_16m + m11b_z_seqs
# m12b_16m = m12_16m + m12b_z_seqs
# m13b_16m = m13_16m + m13b_z_seqs
# m14b_16m = m14_16m + m14b_z_seqs
# m15b_16m = m15_16m + m15b_z_seqs
# m16b_16m = m16_16m + m16b_z_seqs

LINUX_SAVE_PATH = "/home/spetrosyan/Desktop/hexoland/sequences/"

# bg.to_csv(["Sequence"] + m01a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m01a.csv")
# bg.to_csv(["Sequence"] + m02a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m02a.csv")
# bg.to_csv(["Sequence"] + m03a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m03a.csv")
# bg.to_csv(["Sequence"] + m04a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m04a.csv")
# bg.to_csv(["Sequence"] + m05a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m05a.csv")
# bg.to_csv(["Sequence"] + m06a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m06a.csv")
# bg.to_csv(["Sequence"] + m07a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m07a.csv")
# bg.to_csv(["Sequence"] + m08a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m08a.csv")
# bg.to_csv(["Sequence"] + m09a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m09a.csv")
# bg.to_csv(["Sequence"] + m10a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m10a.csv")
# bg.to_csv(["Sequence"] + m11a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m11a.csv")
# bg.to_csv(["Sequence"] + m12a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m12a.csv")
# bg.to_csv(["Sequence"] + m13a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m13a.csv")
# bg.to_csv(["Sequence"] + m14a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m14a.csv")
# bg.to_csv(["Sequence"] + m15a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m15a.csv")
# bg.to_csv(["Sequence"] + m16a_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m16a.csv")

# bg.to_csv(["Sequence"] + m01b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m01b.csv")
# bg.to_csv(["Sequence"] + m02b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m02b.csv")
# bg.to_csv(["Sequence"] + m03b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m03b.csv")
# bg.to_csv(["Sequence"] + m04b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m04b.csv")
# bg.to_csv(["Sequence"] + m05b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m05b.csv")
# bg.to_csv(["Sequence"] + m06b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m06b.csv")
# bg.to_csv(["Sequence"] + m07b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m07b.csv")
# bg.to_csv(["Sequence"] + m08b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m08b.csv")
# bg.to_csv(["Sequence"] + m09b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m09b.csv")
# bg.to_csv(["Sequence"] + m10b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m10b.csv")
# bg.to_csv(["Sequence"] + m11b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m11b.csv")
# bg.to_csv(["Sequence"] + m12b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m12b.csv")
# bg.to_csv(["Sequence"] + m13b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m13b.csv")
# bg.to_csv(["Sequence"] + m14b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m14b.csv")
# bg.to_csv(["Sequence"] + m15b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m15b.csv")
# bg.to_csv(["Sequence"] + m16b_16m, "#{LINUX_SAVE_PATH}2x16M_8H/m16b.csv")

# z_2x16h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 48, 0.5, 1)
# p z_score

# bg = BondGenerator.new

# # s14_4s4b, s14_handles_score = bg.best_sides_out_of("S14", "handles", 150, [], count=5, number=2, overlap=0.25, godmode=false)
# # p s14_4s4b
# # p "Handle S14 score: #{s14_handles_score}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 4, 0, 200)
# p z_8h_tail_bonds
# p "Z score: #{z_score}"

# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# p z_8h_head_bonds

# ### Linear Chain 1

# m1a_tw = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"]
# })

# m1b_tw = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"]
# })

# m1c_tw = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"]
# })

# m1d_tw = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"]
# })

# m1e_tw = bg.sequence_generator({
#     "S1" => [s14_4s4b[4][0], "BS"]
# })

# ### Linear Chain 2

# m2a_tw = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m2b_tw = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"]
# })

# m2c_tw = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"]
# })

# m2d_tw = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"]
# })

# m2e_tw = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[4][0]), "BS"]
# })

# # 1x2

# m1a_1x2_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_1x2_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])

# m1b_1x2_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_1x2_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# # 1x3

# m1a_1x3_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_1x3_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])

# m1b_1x3_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_1x3_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m1c_1x3_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m2c_1x3_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# # 1x4

# m1a_1x4_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_1x4_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])

# m1b_1x4_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_1x4_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m1c_1x4_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m2c_1x4_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# m1d_1x4_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m2d_1x4_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])

# # 1x5

# m1a_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])

# m1b_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m1c_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m2c_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# m1d_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[6]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m2d_1x5_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[7]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])

# m1e_1x5_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[6])
# m2e_1x5_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[7])

# # 1x2

# m1a_1x2 = m1a_tw + m1a_1x2_z_seqs
# m1b_1x2 = m1b_tw + m1b_1x2_z_seqs

# m2a_1x2 = m2a_tw + m2a_1x2_z_seqs
# m2b_1x2 = m2b_tw + m2b_1x2_z_seqs

# # 1x3

# m1a_1x3 = m1a_tw + m1a_1x3_z_seqs
# m1b_1x3 = m1b_tw + m1b_1x3_z_seqs
# m1c_1x3 = m1c_tw + m1c_1x3_z_seqs

# m2a_1x3 = m2a_tw + m2a_1x3_z_seqs
# m2b_1x3 = m2b_tw + m2b_1x3_z_seqs
# m2c_1x3 = m2c_tw + m2c_1x3_z_seqs

# # 1x4

# m1a_1x4 = m1a_tw + m1a_1x4_z_seqs
# m1b_1x4 = m1b_tw + m1b_1x4_z_seqs
# m1c_1x4 = m1c_tw + m1c_1x4_z_seqs
# m1d_1x4 = m1d_tw + m1d_1x4_z_seqs

# m2a_1x4 = m2a_tw + m2a_1x4_z_seqs
# m2b_1x4 = m2b_tw + m2b_1x4_z_seqs
# m2c_1x4 = m2c_tw + m2c_1x4_z_seqs
# m2d_1x4 = m2d_tw + m2d_1x4_z_seqs

# # 1x5

# m1a_1x5 = m1a_tw + m1a_1x5_z_seqs
# m1b_1x5 = m1b_tw + m1b_1x5_z_seqs
# m1c_1x5 = m1c_tw + m1c_1x5_z_seqs
# m1d_1x5 = m1d_tw + m1d_1x5_z_seqs
# m1e_1x5 = m1e_tw + m1e_1x5_z_seqs

# m2a_1x5 = m2a_tw + m2a_1x5_z_seqs
# m2b_1x5 = m2b_tw + m2b_1x5_z_seqs
# m2c_1x5 = m2c_tw + m2c_1x5_z_seqs
# m2d_1x5 = m2d_tw + m2d_1x5_z_seqs
# m2e_1x5 = m2e_tw + m2e_1x5_z_seqs

# basic_zs = bg.get_basic_zs
# # p "Basic Z: #{bg.basic_zs}"

# # 1x2
# bg.to_csv(["Sequence"] + m1a_1x2 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1a_1x2.csv")
# bg.to_csv(["Sequence"] + m1b_1x2 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1b_1x2.csv")

# bg.to_csv(["Sequence"] + m2a_1x2 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2a_1x2.csv")
# bg.to_csv(["Sequence"] + m2b_1x2 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2b_1x2.csv")

# # 1x3
# bg.to_csv(["Sequence"] + m1a_1x3 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1a_1x3.csv")
# bg.to_csv(["Sequence"] + m1b_1x3 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1b_1x3.csv")
# bg.to_csv(["Sequence"] + m1c_1x3 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1c_1x3.csv")

# bg.to_csv(["Sequence"] + m2a_1x3 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2a_1x3.csv")
# bg.to_csv(["Sequence"] + m2b_1x3 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2b_1x3.csv")
# bg.to_csv(["Sequence"] + m2c_1x3 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2c_1x3.csv")

# # 1x4
# bg.to_csv(["Sequence"] + m1a_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1a_1x4.csv")
# bg.to_csv(["Sequence"] + m1b_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1b_1x4.csv")
# bg.to_csv(["Sequence"] + m1c_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1c_1x4.csv")
# bg.to_csv(["Sequence"] + m1d_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1d_1x4.csv")

# bg.to_csv(["Sequence"] + m2a_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2a_1x4.csv")
# bg.to_csv(["Sequence"] + m2b_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2b_1x4.csv")
# bg.to_csv(["Sequence"] + m2c_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2c_1x4.csv")
# bg.to_csv(["Sequence"] + m2d_1x4 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2d_1x4.csv")

# # 1x5
# bg.to_csv(["Sequence"] + m1a_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1a_1x5.csv")
# bg.to_csv(["Sequence"] + m1b_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1b_1x5.csv")
# bg.to_csv(["Sequence"] + m1c_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1c_1x5.csv")
# bg.to_csv(["Sequence"] + m1d_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1d_1x5.csv")
# bg.to_csv(["Sequence"] + m1e_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m1e_1x5.csv")

# bg.to_csv(["Sequence"] + m2a_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2a_1x5.csv")
# bg.to_csv(["Sequence"] + m2b_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2b_1x5.csv")
# bg.to_csv(["Sequence"] + m2c_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2c_1x5.csv")
# bg.to_csv(["Sequence"] + m2d_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2d_1x5.csv")
# bg.to_csv(["Sequence"] + m2e_1x5 + basic_zs, "#{LINUX_SAVE_PATH}1xTW/m2e_1x5.csv")

# ext = "#{LINUX_SAVE_PATH}1xTW/"
# files = ["m1a_1x2.csv", "m2a_1x2.csv", "m1b_1x3.csv", "m2b_1x3.csv", "m1c_1x3.csv", "m2c_1x3.csv", "m1d_1x4.csv", "m2d_1x4.csv", "m1e_1x5.csv", "m2e_1x5.csv"]

# files.each do |file|
#     all_seqs =  bg.read_csv(ext + file)
#     all_bonds = bg.recover_only_z_bonds(all_seqs)
    
#     p file, all_bonds
# end


# bg = BondGenerator.new

# # s14_4s4b, s14_handles_score = bg.best_sides_out_of("S14", "handles", 150, [], count=5, number=2, overlap=0.25, godmode=false)
# # p s14_4s4b
# # p "Handle S14 score: #{s14_handles_score}"

# MAC_SAVE_PATH = "#{LINUX_SAVE_PATH}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 4, 0, 1)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds
# p "Z score: #{z_score}"

# m1_tmp = bg.sequence_generator({
    
# })

# m1a_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m1d_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m1e_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# m1a = m1_tmp + m1a_z_seqs
# m1b = m1_tmp + m1b_z_seqs
# m1c = m1_tmp + m1c_z_seqs
# m1d = m1_tmp + m1d_z_seqs
# m1e = m1_tmp + m1e_z_seqs

# bg.to_csv(["Sequence"] + m1a + basic_zs, "#{MAC_SAVE_PATH}1xTW2/m1a_1x5.csv")
# bg.to_csv(["Sequence"] + m1b + basic_zs, "#{MAC_SAVE_PATH}1xTW2/m1b_1x5.csv")
# bg.to_csv(["Sequence"] + m1c + basic_zs, "#{MAC_SAVE_PATH}1xTW2/m1c_1x5.csv")
# bg.to_csv(["Sequence"] + m1d + basic_zs, "#{MAC_SAVE_PATH}1xTW2/m1d_1x5.csv")
# bg.to_csv(["Sequence"] + m1e + basic_zs, "#{MAC_SAVE_PATH}1xTW2/m1e_1x5.csv")

# bg = BondGenerator.new

# s14_4s4b, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=3, number=2, overlap=0.0, godmode=false)
# p s14_4s4b
# p "Handle S14 score: #{s14_handles_score}"

# MAC_SAVE_PATH = "#{LINUX_SAVE_PATH}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 4, 0, 1)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds
# p z_8h_head_bonds
# p "Z score: #{z_score}"

# m1a_1x3 = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"]
# })

# m1b_1x3 = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"]
# })

# m1c_1x3 = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"]
# })

# m2a_1x3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m2b_1x3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"]
# })

# m2c_1x3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"]
# })


# m1a_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m2a_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m2b_z_seqs = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m2c_z_seqs = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])


# bg.to_csv(["Sequence"] + m1a_1x3 + m1a_z_seqs + basic_zs, "#{MAC_SAVE_PATH}1xTW3/m1a_1x3.csv")
# bg.to_csv(["Sequence"] + m1b_1x3 + m1b_z_seqs + basic_zs, "#{MAC_SAVE_PATH}1xTW3/m1b_1x3.csv")
# bg.to_csv(["Sequence"] + m1c_1x3 + m1c_z_seqs + basic_zs, "#{MAC_SAVE_PATH}1xTW3/m1c_1x3.csv")

# bg.to_csv(["Sequence"] + m2a_1x3 + m2a_z_seqs + basic_zs, "#{MAC_SAVE_PATH}1xTW3/m2a_1x3.csv")
# bg.to_csv(["Sequence"] + m2b_1x3 + m2b_z_seqs + basic_zs, "#{MAC_SAVE_PATH}1xTW3/m2b_1x3.csv")
# bg.to_csv(["Sequence"] + m2c_1x3 + m2c_z_seqs + basic_zs, "#{MAC_SAVE_PATH}1xTW3/m2c_1x3.csv")

# [[["H60_R_P", "H61_L_P", "H56_R_P", "H56_L_S"], 48.8], [["H60_L_S", "H61_R_S", "H56_L_P", "H56_R_S"], 50.1], [["H61_R_P", "H60_L_P", "H57_R_P", "H57_L_P"], 50.8]]
# "Handle S14 score: 0.0"
# [[["H21_H22", "H23_H24"], "H62_H63", ["H35_H36", "H37_H38"], "H44_H45"], ["H48_H49", "H1_H2", ["H18", "H19_H20"], ["H55", "H53_H54"]], [["H27", "H25_H26"], "H4_H5", "H16_H17", "H10_H11"], ["H34_H3", "H12_H13", "H50_H51", "H66_H67"]]
# "Z score: 0.0"


# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 10, [], count=4, number=2, overlap=0.0, godmode=false)
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 10, [], count=2, number=2, overlap=0.0, godmode=false)
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 10, [], count=4, number=2, overlap=0.0, godmode=false)


# s14_hinges, s14_hinges_score = bg.best_sides_out_of("S14", "hinges", 10, [], count=4, number=2, overlap=0.0, godmode=false)
# s25_hinges, s25_hinges_score = bg.best_sides_out_of("S25", "hinges", 10, [], count=2, number=2, overlap=0.0, godmode=false)
# s36_hinges, s36_hinges_score = bg.best_sides_out_of("S36", "hinges", 10, [], count=4, number=2, overlap=0.0, godmode=false)


# p s14_handles, s14_hinges 
# p "Handle S14 score: #{s14_handles_score}"
# p "Hinge S14 score: #{s14_hinges_score}"

# p s25_handles, s25_hinges
# p "Handle S25 score: #{s25_handles_score}"
# p "Hinge S25 score: #{s25_hinges_score}"

# p s36_handles, s36_hinges
# p "Handle S36 score: #{s36_handles_score}"
# p "Hinge S36 score: #{s36_hinges_score}"

# # Layer 1

# m1a_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]

# })

# m2a_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_hinges[0][0], "B"],
#     "S2" => [s25_hinges[0][0], "B"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m3a_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_hinges[1][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"]

# })

# m2b_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_hinges[2+0][0], "B"],
#     "S2" => [s25_hinges[1+0][0], "B"],
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"]
# })

# m3b_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_bot = bg.sequence_generator({
#     "S1" => [s14_hinges[2+1][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage II

# # Layer 1

# m1a_2x2x2_top = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[0][0]), "B"]

# })

# m2a_2x2x2_top = bg.sequence_generator({
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m3a_2x2x2_top = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[1][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[0][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_top = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_top = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[2][0]), "B"],

# })

# m2b_2x2x2_top = bg.sequence_generator({
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"]
# })

# m3b_2x2x2_top = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[3][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[1][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_top = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# MAC_SAVE_PATH = "#{LINUX_SAVE_PATH}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 4, 0, 10)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# bg.to_csv(["Sequence"] + m1a_2x2x2_bot + m1a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m1a_bot.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_bot + m2a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m2a_bot.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_bot + m3a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m3a_bot.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_bot + m4a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m4a_bot.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_bot + m1b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m1b_bot.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_bot + m2b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m2b_bot.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_bot + m3b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m3b_bot.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_bot + m4b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m4b_bot.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_top + m1a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m1a_top.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_top + m2a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m2a_top.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_top + m3a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m3a_top.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_top + m4a_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m4a_top.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_top + m1b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m1b_top.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_top + m2b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m2b_top.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_top + m3b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m3b_top.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_top + m4b_z + basic_zs, "#{MAC_SAVE_PATH}hi-ha-2x2x2x2/m4b_top.csv")

# bg = BondGenerator.new
# s14_4s4b, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=3, number=2, overlap=0.0, godmode=false, min_strength=47.0, max_strength=53.0)
# p s14_4s4b
# p "Handle S14 score: #{s14_handles_score}"

# s25_4s4b, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=3, number=2, overlap=0.0, godmode=false, min_strength=47.0, max_strength=53.0)
# p s25_4s4b
# p "Handle S25 score: #{s25_handles_score}"

# s36_4s4b, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=3, number=2, overlap=0.0, godmode=false, min_strength=47.0, max_strength=53.0)
# p s36_4s4b
# p "Handle S36 score: #{s36_handles_score}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 6, 0.25, 100)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)

# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# basic_zs = bg.get_basic_zs

# # Monomer 1

# m1a_3x3 = bg.sequence_generator({
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[0][0], "BS"]
# })

# m1b_3x3 = bg.sequence_generator({
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[1][0], "BS"]
# })

# m1c_3x3 = bg.sequence_generator({
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[2][0], "BS"]
# })

# # Monomer 2

# m2a_3x3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"]
# })

# m2b_3x3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"]
# })

# m2c_3x3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"]
# })

# # Monomer 3

# m3a_3x3 = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3b_3x3 = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m3c_3x3 = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })


# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m2b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m2c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m3b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m3c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])


# bg.to_csv(["Sequence"] + m1a_3x3 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m1a.csv")
# bg.to_csv(["Sequence"] + m1b_3x3 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m1b.csv")
# bg.to_csv(["Sequence"] + m1c_3x3 + m1c_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m1c.csv")

# bg.to_csv(["Sequence"] + m2a_3x3 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m2a.csv")
# bg.to_csv(["Sequence"] + m2b_3x3 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m2b.csv")
# bg.to_csv(["Sequence"] + m2c_3x3 + m2c_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m2c.csv")

# bg.to_csv(["Sequence"] + m3a_3x3 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m3a.csv")
# bg.to_csv(["Sequence"] + m3b_3x3 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m3b.csv")
# bg.to_csv(["Sequence"] + m3c_3x3 + m3c_z + basic_zs, "#{LINUX_SAVE_PATH}3x3M/m3c.csv")


# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=4, number=2, overlap=0.0, godmode=false, min_strength=45.0, max_strength=55.0)
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=2, number=2, overlap=0.0, godmode=false, min_strength=45.0, max_strength=55.0)
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=4, number=2, overlap=0.0, godmode=false, min_strength=45.0, max_strength=55.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# # p "Hinge S14 score: #{s14_hinges_score}"

# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# # p "Hinge S25 score: #{s25_hinges_score}"

# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"
# # p "Hinge S36 score: #{s36_hinges_score}"

# s14_hinges, s14_hinges_score = bg.best_sides_out_of("S14", "hinges", 1, [], count=8, number=2, overlap=0.5, godmode=false, min_strength=45.0, max_strength=55.0)

# p s14_hinges, s14_hinges_score 
# p "Hinge S14 score: #{s14_hinges_score}"

# s25_hinges, s25_hinges_score = bg.best_sides_out_of("S25", "hinges", 1, [], count=10, number=2, overlap=0.5, godmode=false, min_strength=45.0, max_strength=55.0)

# p s25_hinges, s25_hinges_score 
# p "Hinge S25 score: #{s25_hinges_score}"

# s36_hinges, s36_hinges_score = bg.best_sides_out_of("S36", "hinges", 1, [], count=8, number=2, overlap=0.5, godmode=false, min_strength=45.0, max_strength=55.0)

# p s36_hinges, s36_hinges_score 
# p "Hinge S36 score: #{s36_hinges_score}"

# ### Hierarhical Stage I

# # Layer 1

# m1a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]

# })

# m2a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_hinges[0][0], "B"],
#     "S2" => [s25_hinges[0][0], "B"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m3a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_hinges[2][0], "B"],
#     "S3" => [s36_hinges[0][0], "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_hinges[1][0], "B"],
#     "S2" => [s25_hinges[1][0], "B"],
#     "S3" => [s36_hinges[1][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"]

# })

# m2b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_hinges[2][0], "B"],
#     "S2" => [s25_hinges[3][0], "B"],
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"]
# })

# m3b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S2" => [s25_hinges[5][0], "B"],
#     "S3" => [s36_hinges[2][0], "B"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_hinges[3][0], "B"],
#     "S2" => [s25_hinges[4][0], "B"],
#     "S3" => [s36_hinges[3][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage II

# # Layer 1

# m1a_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[0][0]), "B"]

# })

# m2a_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m3a_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_hinges[6][0], "B"],
#     "S3" => [s36_hinges[4][0], "B"],
#     "S4" => [bg.complement_side(s14_hinges[1][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[0][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_hinges[5][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[2][0]), "B"],

# })

# m2b_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"]
# })

# m3b_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S2" => [s25_hinges[7][0], "B"],
#     "S3" => [s36_hinges[6][0], "B"],
#     "S4" => [bg.complement_side(s14_hinges[3][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[3][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_hinges[7][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage III


# # Layer 1

# m1a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_hinges[0][0]), "B"]

# })

# m2a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_hinges[4][0], "B"],
#     "S2" => [s25_hinges[8][0], "B"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[2][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[1][0]), "B"]
# })

# m3a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_hinges[5][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S6" => [bg.complement_side(s36_hinges[2][0]), "B"]

# })

# m2b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_hinges[6][0], "B"],
#     "S2" => [s25_hinges[9][0], "B"],
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[5][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[3][0]), "B"]
# })

# m3b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_hinges[7][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage IV

# # Layer 1

# m1a_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[4][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[1][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[4][0]), "B"]

# })

# m2a_2x2x2_top_right = bg.sequence_generator({
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[6][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[5][0]), "B"]
# })

# m3a_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[5][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[8][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_top_right = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[6][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[4][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[6][0]), "B"]

# })

# m2b_2x2x2_top_right = bg.sequence_generator({
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[7][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[7][0]), "B"]
# })

# m3b_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[7][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[9][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_top_right = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

MAC_SAVE_PATH = "#{LINUX_SAVE_PATH}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 4, 0, 10)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])


# bg.to_csv(["Sequence"] + m1a_2x2x2_bot_left + m1a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1a_bot_left.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_bot_left + m2a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2a_bot_left.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_bot_left + m3a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3a_bot_left.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_bot_left + m4a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4a_bot_left.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_bot_left + m1b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1b_bot_left.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_bot_left + m2b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2b_bot_left.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_bot_left + m3b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3b_bot_left.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_bot_left + m4b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4b_bot_left.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_top_left + m1a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1a_top_left.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_top_left + m2a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2a_top_left.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_top_left + m3a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3a_top_left.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_top_left + m4a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4a_top_left.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_top_left + m1b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1b_top_left.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_top_left + m2b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2b_top_left.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_top_left + m3b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3b_top_left.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_top_left + m4b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4b_top_left.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_bot_right + m1a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1a_bot_right.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_bot_right + m2a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2a_bot_right.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_bot_right + m3a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3a_bot_right.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_bot_right + m4a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4a_bot_right.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_bot_right + m1b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1b_bot_right.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_bot_right + m2b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2b_bot_right.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_bot_right + m3b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3b_bot_right.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_bot_right + m4b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4b_bot_right.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_top_right + m1a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1a_top_right.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_top_right + m2a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2a_top_right.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_top_right + m3a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3a_top_right.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_top_right + m4a_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4a_top_right.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_top_right + m1b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m1b_top_right.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_top_right + m2b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m2b_top_right.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_top_right + m3b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m3b_top_right.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_top_right + m4b_z + basic_zs, "#{MAC_SAVE_PATH}2x2x2x4/m4b_top_right.csv")


# bg = BondGenerator.new


# ########################################
# ################## T1 ##################
# ########################################

### Layer 1

# m1a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_hinges[2][0], "B"],
#     "S3" => [s36_hinges[1][0], "B"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_hinges[0][0], "B"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_hinges[0][0], "B"],
#     "S2" => [s25_hinges[1][0], "B"],
#     "S3" => [s36_hinges[0][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S2" => [s25_hinges[5][0], "B"],
#     "S3" => [s36_hinges[4][0], "B"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_hinges[3][0], "B"],
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_hinges[3][0], "B"],
#     "S2" => [s25_hinges[4][0], "B"],
#     "S3" => [s36_hinges[3][0], "B"],
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# ########################################
# ################## T2 ##################
# ########################################

# ### Layer 1

# m1a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[0][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[0][0]), "B"]
# })

# m2a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_hinges[2][0], "B"],
#     "S4" => [bg.complement_side(s14_hinges[1][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[1][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[2][0]), "B"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T2 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7m_T2 = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7m_T2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[3][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[3][0]), "B"]
# })

# m2b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S3" => [s36_hinges[5][0], "B"],
#     "S4" => [bg.complement_side(s14_hinges[4][0]), "B"],
#     "S5" => [bg.complement_side(s25_hinges[4][0]), "B"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_hinges[5][0]), "B"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T2 = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7m_T2 = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7m_T2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })


# ########################################
# ################## T3 ##################
# ########################################

# ### Layer 1

# m1a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_hinges[1][0]), "B"]
# })

# m2a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_hinges[1][0], "B"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[2][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[0][0]), "B"]
# })

# m6a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_hinges[2][0], "B"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_hinges[2][0]), "B"]
# })

# m7a_2x7m_T3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"],
#     "S6" => [bg.complement_side(s36_hinges[4][0]), "B"]
# })

# m2b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_hinges[4][0], "B"],
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_hinges[5][0]), "B"],
#     "S6" => [bg.complement_side(s36_hinges[3][0]), "B"]
# })

# m6b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_hinges[5][0], "B"],
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_hinges[5][0]), "B"]
# })

# m7b_2x7m_T3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })
# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false, min_strength=43.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false, min_strength=43.0)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false, min_strength=43.0)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"


# m1a_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_3x7m = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_3x7m = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_3x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ###

# m1b_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_3x7m = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_3x7m = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_3x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# ###

# m1c_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+0][0], "BS"],
#     "S2" => [s25_handles[8+0][0], "BS"],
#     "S3" => [s36_handles[8+0][0], "BS"]
# })

# m2c_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+1][0], "BS"],
#     "S2" => [s25_handles[8+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+0][0]), "BS"]
# })

# m3c_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+1][0]), "BS"]
# })

# m4c_3x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+3][0], "BS"],
#     "S2" => [s25_handles[8+3][0], "BS"],
#     "S3" => [s36_handles[8+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+2][0]), "BS"]
# })

# m5c_3x7m = bg.sequence_generator({
#     "S2" => [s25_handles[8+2][0], "BS"],
#     "S3" => [s36_handles[8+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8+0][0]), "BS"]
# })

# m6c_3x7m = bg.sequence_generator({
#     "S3" => [s36_handles[8+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+2][0]), "BS"]
# })

# m7c_3x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[8+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+3][0]), "BS"]
# })

# z_6h_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 14, 0.34, 100, min_ge=68, max_ge=75)
# z_6h_head_bonds = bg.z_complement_side(z_6h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_6h_tail_bonds, z_6h_head_bonds, z_score

# m1a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[7]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[8]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[9]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[10]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[3])
# m5b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[11]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[4])
# m6b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[12]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[5])
# m7b_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[12]) + bg.add_z_bonds("HEAD", z_6h_head_bonds[6])

# m1c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[7])
# m2c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[8])
# m3c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[9])
# m4c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[10])
# m5c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[11])
# m6c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[12])
# m7c_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[13])

# bg.to_csv(["Sequence"] + m1a_3x7m + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_3x7m + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m2a.csv")
# bg.to_csv(["Sequence"] + m3a_3x7m + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m3a.csv")
# bg.to_csv(["Sequence"] + m4a_3x7m + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m4a.csv")
# bg.to_csv(["Sequence"] + m5a_3x7m + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m5a.csv")
# bg.to_csv(["Sequence"] + m6a_3x7m + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m6a.csv")
# bg.to_csv(["Sequence"] + m7a_3x7m + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m7a.csv")

# bg.to_csv(["Sequence"] + m1b_3x7m + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_3x7m + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m2b.csv")
# bg.to_csv(["Sequence"] + m3b_3x7m + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m3b.csv")
# bg.to_csv(["Sequence"] + m4b_3x7m + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m4b.csv")
# bg.to_csv(["Sequence"] + m5b_3x7m + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m5b.csv")
# bg.to_csv(["Sequence"] + m6b_3x7m + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m6b.csv")
# bg.to_csv(["Sequence"] + m7b_3x7m + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m7b.csv")

# bg.to_csv(["Sequence"] + m1c_3x7m + m1c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m1c.csv")
# bg.to_csv(["Sequence"] + m2c_3x7m + m2c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m2c.csv")
# bg.to_csv(["Sequence"] + m3c_3x7m + m3c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m3c.csv")
# bg.to_csv(["Sequence"] + m4c_3x7m + m4c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m4c.csv")
# bg.to_csv(["Sequence"] + m5c_3x7m + m5c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m5c.csv")
# bg.to_csv(["Sequence"] + m6c_3x7m + m6c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m6c.csv")
# bg.to_csv(["Sequence"] + m7c_3x7m + m7c_z + basic_zs, "#{LINUX_SAVE_PATH}3x7-but-sodium/m7c.csv")

# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"

# s14_half_handles, s14_half_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=6, number=1, overlap=0.0, godmode=false)
# p s14_half_handles, s14_half_handles_score 
# p "Half-Handle S14 score: #{s14_half_handles_score}"

# s25_half_handles, s25_half_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=6, number=1, overlap=0.0, godmode=false)
# p s25_half_handles, s25_half_handles_score 
# p "Half-Handle S25 score: #{s25_half_handles_score}"

# s36_half_handles, s36_half_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=6, number=1, overlap=0.0, godmode=false)
# p s36_half_handles, s36_half_handles_score 
# p "Half-Handle S36 score: #{s36_half_handles_score}"

########################################
################## T1 ##################
########################################

# m1a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_half_handles[0][0], "BS"],
#     "S2" => [s25_half_handles[0][0], "BS"],
#     "S3" => [s36_half_handles[0][0], "BS"]
# })

# # Layer 1

# m1a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_half_handles[2][0], "BS"],
#     "S3" => [s36_half_handles[1][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_half_handles[0][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_half_handles[0][0], "BS"],
#     "S2" => [s25_half_handles[1][0], "BS"],
#     "S3" => [s36_half_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S2" => [s25_half_handles[5][0], "BS"],
#     "S3" => [s36_half_handles[4][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_half_handles[3][0], "BS"],
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_half_handles[3][0], "BS"],
#     "S2" => [s25_half_handles[4][0], "BS"],
#     "S3" => [s36_half_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# ########################################
# ################## T2 ##################
# ########################################

# ### Layer 1

# m1a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[0][0]), "BS"]
# })

# m2a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_half_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T2 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7m_T2 = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7m_T2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[3][0]), "BS"]
# })

# m2b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S3" => [s36_half_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T2 = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7m_T2 = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7m_T2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })


# ########################################
# ################## T3 ##################
# ########################################

# ### Layer 1

# m1a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[1][0]), "BS"]
# })

# m2a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[1][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[0][0]), "BS"]
# })

# m6a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[2][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[2][0]), "BS"]
# })

# m7a_2x7m_T3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[4][0]), "BS"]
# })

# m2b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[4][0], "BS"],
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[3][0]), "BS"]
# })

# m6b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[5][0], "BS"],
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[5][0]), "BS"]
# })

# m7b_2x7m_T3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })
# bg = BondGenerator.new
# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 4, 0.0, 100)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# xy_free = bg.sequence_generator({})

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])

# m1c_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m1d_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])

# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1d.csv")

# bg = BondGenerator.new
# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 7, 0.25, 1, 90, 93)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# xy_free = bg.sequence_generator({})

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])

# m1c_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])

# m1d_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])

# m1e_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])


# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x5/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x5/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x5/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x5/m1d.csv")
# bg.to_csv(["Sequence"] + xy_free + m1e_z + basic_zs, "#{MAC_SAVE_PATH}1x5/m1e.csv")


# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x4/m1d.csv")

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
# m5b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m6b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])
# m7b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[6])


### T1

# bg.to_csv(["Sequence"] + m1a_2x7m_T1 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m1a_T1.csv")
# bg.to_csv(["Sequence"] + m2a_2x7m_T1 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m2a_T1.csv")
# bg.to_csv(["Sequence"] + m3a_2x7m_T1 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m3a_T1.csv")
# bg.to_csv(["Sequence"] + m4a_2x7m_T1 + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m4a_T1.csv")
# bg.to_csv(["Sequence"] + m5a_2x7m_T1 + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m5a_T1.csv")
# bg.to_csv(["Sequence"] + m6a_2x7m_T1 + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m6a_T1.csv")
# bg.to_csv(["Sequence"] + m7a_2x7m_T1 + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m7a_T1.csv")

# bg.to_csv(["Sequence"] + m1b_2x7m_T1 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m1b_T1.csv")
# bg.to_csv(["Sequence"] + m2b_2x7m_T1 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m2b_T1.csv")
# bg.to_csv(["Sequence"] + m3b_2x7m_T1 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m3b_T1.csv")
# bg.to_csv(["Sequence"] + m4b_2x7m_T1 + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m4b_T1.csv")
# bg.to_csv(["Sequence"] + m5b_2x7m_T1 + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m5b_T1.csv")
# bg.to_csv(["Sequence"] + m6b_2x7m_T1 + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m6b_T1.csv")
# bg.to_csv(["Sequence"] + m7b_2x7m_T1 + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m7b_T1.csv")

# ### T2

# bg.to_csv(["Sequence"] + m1a_2x7m_T2 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m1a_T2.csv")
# bg.to_csv(["Sequence"] + m2a_2x7m_T2 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m2a_T2.csv")
# bg.to_csv(["Sequence"] + m3a_2x7m_T2 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m3a_T2.csv")
# bg.to_csv(["Sequence"] + m4a_2x7m_T2 + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m4a_T2.csv")
# bg.to_csv(["Sequence"] + m5a_2x7m_T2 + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m5a_T2.csv")
# bg.to_csv(["Sequence"] + m6a_2x7m_T2 + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m6a_T2.csv")
# bg.to_csv(["Sequence"] + m7a_2x7m_T2 + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m7a_T2.csv")

# bg.to_csv(["Sequence"] + m1b_2x7m_T2 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m1b_T2.csv")
# bg.to_csv(["Sequence"] + m2b_2x7m_T2 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m2b_T2.csv")
# bg.to_csv(["Sequence"] + m3b_2x7m_T2 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m3b_T2.csv")
# bg.to_csv(["Sequence"] + m4b_2x7m_T2 + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m4b_T2.csv")
# bg.to_csv(["Sequence"] + m5b_2x7m_T2 + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m5b_T2.csv")
# bg.to_csv(["Sequence"] + m6b_2x7m_T2 + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m6b_T2.csv")
# bg.to_csv(["Sequence"] + m7b_2x7m_T2 + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m7b_T2.csv")

# ### T3

# bg.to_csv(["Sequence"] + m1a_2x7m_T3 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m1a_T3.csv")
# bg.to_csv(["Sequence"] + m2a_2x7m_T3 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m2a_T3.csv")
# bg.to_csv(["Sequence"] + m3a_2x7m_T3 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m3a_T3.csv")
# bg.to_csv(["Sequence"] + m4a_2x7m_T3 + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m4a_T3.csv")
# bg.to_csv(["Sequence"] + m5a_2x7m_T3 + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m5a_T3.csv")
# bg.to_csv(["Sequence"] + m6a_2x7m_T3 + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m6a_T3.csv")
# bg.to_csv(["Sequence"] + m7a_2x7m_T3 + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m7a_T3.csv")

# bg.to_csv(["Sequence"] + m1b_2x7m_T3 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m1b_T3.csv")
# bg.to_csv(["Sequence"] + m2b_2x7m_T3 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m2b_T3.csv")
# bg.to_csv(["Sequence"] + m3b_2x7m_T3 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m3b_T3.csv")
# bg.to_csv(["Sequence"] + m4b_2x7m_T3 + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m4b_T3.csv")
# bg.to_csv(["Sequence"] + m5b_2x7m_T3 + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m5b_T3.csv")
# bg.to_csv(["Sequence"] + m6b_2x7m_T3 + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m6b_T3.csv")
# bg.to_csv(["Sequence"] + m7b_2x7m_T3 + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-HH/m7b_T3.csv")


# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 25, [], count=5, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 25, [], count=5, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 25, [], count=5, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"


# m1_hc13 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2_hc13 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m3_hc13 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"]
# })

# m4_hc13 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"]
# })

# m5_hc13 = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"]
# })

# m6_hc13 = bg.sequence_generator({
#     "S2" => [s25_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m7_hc13 = bg.sequence_generator({
#     "S2" => [s25_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m8_hc13 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m9_hc13 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m10_hc13 = bg.sequence_generator({
#     "S2" => [s25_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m11_hc13 = bg.sequence_generator({
#     "S3" => [s36_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"]
# })

# m12_hc13 = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"]
# })

# m13_hc13 = bg.sequence_generator({
#     "S2" => [s25_handles[4][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# bg.to_csv(["Sequence"] + m1_hc13, "#{LINUX_SAVE_PATH}13HC/m1.csv")
# bg.to_csv(["Sequence"] + m2_hc13, "#{LINUX_SAVE_PATH}13HC/m2.csv")
# bg.to_csv(["Sequence"] + m3_hc13, "#{LINUX_SAVE_PATH}13HC/m3.csv")
# bg.to_csv(["Sequence"] + m4_hc13, "#{LINUX_SAVE_PATH}13HC/m4.csv")
# bg.to_csv(["Sequence"] + m5_hc13, "#{LINUX_SAVE_PATH}13HC/m5.csv")
# bg.to_csv(["Sequence"] + m6_hc13, "#{LINUX_SAVE_PATH}13HC/m6.csv")
# bg.to_csv(["Sequence"] + m7_hc13, "#{LINUX_SAVE_PATH}13HC/m7.csv")
# bg.to_csv(["Sequence"] + m8_hc13, "#{LINUX_SAVE_PATH}13HC/m8.csv")
# bg.to_csv(["Sequence"] + m9_hc13, "#{LINUX_SAVE_PATH}13HC/m9.csv")
# bg.to_csv(["Sequence"] + m10_hc13, "#{LINUX_SAVE_PATH}13HC/m10.csv")
# bg.to_csv(["Sequence"] + m11_hc13, "#{LINUX_SAVE_PATH}13HC/m11.csv")
# bg.to_csv(["Sequence"] + m12_hc13, "#{LINUX_SAVE_PATH}13HC/m12.csv")
# bg.to_csv(["Sequence"] + m13_hc13, "#{LINUX_SAVE_PATH}13HC/m13.csv")

# bg = BondGenerator.new

# bg.compute_z_bond_fe


#1x4 Balanced

# bg = BondGenerator.new
# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 3, 0.0, 1, 90, 93)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# xy_free = bg.sequence_generator({})

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m1d_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])

# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x4-BALANCED/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x4-BALANCED/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x4-BALANCED/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x4-BALANCED/m1d.csv")


#1x5 Balanced

# bg = BondGenerator.new
# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 4, 0.0, 1, 89, 94)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# xy_free = bg.sequence_generator({})

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m1d_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m1e_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])

# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x5-BALANCED/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x5-BALANCED/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x5-BALANCED/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x5-BALANCED/m1d.csv")
# bg.to_csv(["Sequence"] + xy_free + m1e_z + basic_zs, "#{MAC_SAVE_PATH}1x5-BALANCED/m1e.csv")

#1x6 Balanced

# bg = BondGenerator.new
# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 5, 0.25, 10, 89, 93)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# xy_free = bg.sequence_generator({})

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m1d_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m1e_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
# m1f_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])

# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x6-BALANCED/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x6-BALANCED/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x6-BALANCED/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x6-BALANCED/m1d.csv")
# bg.to_csv(["Sequence"] + xy_free + m1e_z + basic_zs, "#{MAC_SAVE_PATH}1x6-BALANCED/m1e.csv")
# bg.to_csv(["Sequence"] + xy_free + m1f_z + basic_zs, "#{MAC_SAVE_PATH}1x6-BALANCED/m1f.csv")

#1x7 Balanced

# bg = BondGenerator.new
# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 6, 0.25, 10, 89, 93)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# xy_free = bg.sequence_generator({})

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m1b_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m1c_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m1d_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m1e_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
# m1f_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m1g_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])

# bg.to_csv(["Sequence"] + xy_free + m1a_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1a.csv")
# bg.to_csv(["Sequence"] + xy_free + m1b_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1b.csv")
# bg.to_csv(["Sequence"] + xy_free + m1c_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1c.csv")
# bg.to_csv(["Sequence"] + xy_free + m1d_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1d.csv")
# bg.to_csv(["Sequence"] + xy_free + m1e_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1e.csv")
# bg.to_csv(["Sequence"] + xy_free + m1f_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1f.csv")
# bg.to_csv(["Sequence"] + xy_free + m1g_z + basic_zs, "#{MAC_SAVE_PATH}1x7-BALANCED/m1g.csv")



# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"


# 16M

# s14_4s4b_no_ref = bg.generate_sides("S14", [], count=12, number=2, overlap=0.25)
# s14_4s4b_w_ref = bg.generate_sides("S14", s14_4s4b_no_ref, count=14, number=2, overlap=0.5)

# s25_4s4b_no_ref = bg.generate_sides("S25", [], count=12, number=2, overlap=0.25)
# s25_4s4b_w_ref = bg.generate_sides("S25", s25_4s4b_no_ref, count=14, number=2, overlap=0.5)

# s36_4s4b_no_ref = bg.generate_sides("S36", [], count=12, number=2, overlap=0.25)
# s36_4s4b_w_ref = bg.generate_sides("S36", s36_4s4b_no_ref, count=14, number=2, overlap=0.5)


# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false, min_strength=43.0)
# p s14_handles_score
# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, s14_handles, count=14, number=2, overlap=0.5, godmode=false, min_strength=43.0)

# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"


# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false, min_strength=43.0)
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, s25_handles, count=14, number=2, overlap=0.5, godmode=false, min_strength=43.0)

# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"

# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=12, number=2, overlap=0.25, godmode=false, min_strength=43.0)
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, s36_handles, count=14, number=2, overlap=0.5, godmode=false, min_strength=43.0)

# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"


# m1_19m = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2_19m = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3_19m = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4_19m = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[6][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# m5_19m = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8][0]), "BS"]
# })

# m6_19m = bg.sequence_generator({
#     "S1" => [s14_handles[5][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m7_19m = bg.sequence_generator({
#     "S1" => [s14_handles[6][0], "BS"],
#     "S2" => [s25_handles[4][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m8_19m = bg.sequence_generator({
#     "S1" => [s14_handles[7][0], "BS"],
#     "S2" => [s25_handles[5][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m9_19m = bg.sequence_generator({
#     "S1" => [s14_handles[8][0], "BS"],
#     "S2" => [s25_handles[10][0], "BS"],
#     "S3" => [s36_handles[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[7][0]), "BS"]
# })

# m10_19m = bg.sequence_generator({
#     "S1" => [s14_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[10][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[11][0]), "BS"]
# })

# m11_19m = bg.sequence_generator({
#     "S2" => [s25_handles[7][0], "BS"],
#     "S3" => [s36_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[5][0]), "BS"]
# })

# m12_19m = bg.sequence_generator({
#     "S1" => [s14_handles[10][0], "BS"],
#     "S2" => [s25_handles[8][0], "BS"],
#     "S3" => [s36_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[5][0]), "BS"]
# })

# m13_19m = bg.sequence_generator({
#     "S1" => [s14_handles[11][0], "BS"],
#     "S2" => [s25_handles[9][0], "BS"],
#     "S3" => [s36_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[6][0]), "BS"]
# })

# m14_19m = bg.sequence_generator({
#     "S1" => [s14_handles[12][0], "BS"],
#     "S2" => [s25_handles[13][0], "BS"],
#     "S3" => [s36_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[9][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[10][0]), "BS"]
# })

# m15_19m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[13][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[13][0]), "BS"]
# })

# m16_19m = bg.sequence_generator({
#     "S2" => [s25_handles[11][0], "BS"],
#     "S3" => [s36_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[7][0]), "BS"],
# })

# m17_19m = bg.sequence_generator({
#     "S1" => [s14_handles[13][0], "BS"],
#     "S2" => [s25_handles[12][0], "BS"],
#     "S3" => [s36_handles[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[9][0]), "BS"]
# })

# m18_19m = bg.sequence_generator({
#     "S3" => [s36_handles[13][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[12][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[12][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[12][0]), "BS"]
# })

# m19_19m = bg.sequence_generator({
#     "S3" => [s36_handles[12][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[13][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[11][0]), "BS"],
# })


# bg.to_csv(["Sequence"] + m1_19m, "#{LINUX_SAVE_PATH}19M-new/m1.csv")
# bg.to_csv(["Sequence"] + m2_19m, "#{LINUX_SAVE_PATH}19M-new/m2.csv")
# bg.to_csv(["Sequence"] + m3_19m, "#{LINUX_SAVE_PATH}19M-new/m3.csv")
# bg.to_csv(["Sequence"] + m4_19m, "#{LINUX_SAVE_PATH}19M-new/m4.csv")
# bg.to_csv(["Sequence"] + m5_19m, "#{LINUX_SAVE_PATH}19M-new/m5.csv")
# bg.to_csv(["Sequence"] + m6_19m, "#{LINUX_SAVE_PATH}19M-new/m6.csv")
# bg.to_csv(["Sequence"] + m7_19m, "#{LINUX_SAVE_PATH}19M-new/m7.csv")
# bg.to_csv(["Sequence"] + m8_19m, "#{LINUX_SAVE_PATH}19M-new/m8.csv")
# bg.to_csv(["Sequence"] + m9_19m, "#{LINUX_SAVE_PATH}19M-new/m9.csv")
# bg.to_csv(["Sequence"] + m10_19m, "#{LINUX_SAVE_PATH}19M-new/m10.csv")
# bg.to_csv(["Sequence"] + m11_19m, "#{LINUX_SAVE_PATH}19M-new/m11.csv")
# bg.to_csv(["Sequence"] + m12_19m, "#{LINUX_SAVE_PATH}19M-new/m12.csv")
# bg.to_csv(["Sequence"] + m13_19m, "#{LINUX_SAVE_PATH}19M-new/m13.csv")
# bg.to_csv(["Sequence"] + m14_19m, "#{LINUX_SAVE_PATH}19M-new/m14.csv")
# bg.to_csv(["Sequence"] + m15_19m, "#{LINUX_SAVE_PATH}19M-new/m15.csv")
# bg.to_csv(["Sequence"] + m16_19m, "#{LINUX_SAVE_PATH}19M-new/m16.csv")
# bg.to_csv(["Sequence"] + m17_19m, "#{LINUX_SAVE_PATH}19M-new/m17.csv")
# bg.to_csv(["Sequence"] + m18_19m, "#{LINUX_SAVE_PATH}19M-new/m18.csv")
# bg.to_csv(["Sequence"] + m19_19m, "#{LINUX_SAVE_PATH}19M-new/m19.csv")


# m1a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7M = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7M = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7M = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ###

# m1b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7M = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7M = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7M = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 7, 0.4, 10, 90, 93)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
# m5b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m6b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])
# m7b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[6])


# bg.to_csv(["Sequence"] + m1a_2x7M + m1a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_2x7M + m2a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m2a.csv")
# bg.to_csv(["Sequence"] + m3a_2x7M + m3a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m3a.csv")
# bg.to_csv(["Sequence"] + m4a_2x7M + m4a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m4a.csv")
# bg.to_csv(["Sequence"] + m5a_2x7M + m5a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m5a.csv")
# bg.to_csv(["Sequence"] + m6a_2x7M + m6a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m6a.csv")
# bg.to_csv(["Sequence"] + m7a_2x7M + m7a_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m7a.csv")

# bg.to_csv(["Sequence"] + m1b_2x7M + m1b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_2x7M + m2b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m2b.csv")
# bg.to_csv(["Sequence"] + m3b_2x7M + m3b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m3b.csv")
# bg.to_csv(["Sequence"] + m4b_2x7M + m4b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m4b.csv")
# bg.to_csv(["Sequence"] + m5b_2x7M + m5b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m5b.csv")
# bg.to_csv(["Sequence"] + m6b_2x7M + m6b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m6b.csv")
# bg.to_csv(["Sequence"] + m7b_2x7M + m7b_z + basic_zs, "#{MAC_SAVE_PATH}2x7-new/m7b.csv")



# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 25, [], count=4, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 25, [], count=2, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 25, [], count=4, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"


# s14_half_handles, s14_half_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=8, number=1, overlap=0.0, godmode=false)
# p s14_half_handles, s14_half_handles_score 
# p "Half-Handle S14 score: #{s14_half_handles_score}"

# s25_half_handles, s25_half_handles_score = bg.best_sides_out_of("S25", "handles", 100, [], count=10, number=1, overlap=0.5, godmode=false)
# p s25_half_handles, s25_half_handles_score 
# p "Half-Handle S25 score: #{s25_half_handles_score}"

# s36_half_handles, s36_half_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=8, number=1, overlap=0.0, godmode=false)
# p s36_half_handles, s36_half_handles_score 
# p "Half-Handle S36 score: #{s36_half_handles_score}"


# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 4, 0.0, 1, 89, 94)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score


# ### Hierarhical Stage I

# # Layer 1

# m1a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]

# })

# m2a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_half_handles[0][0], "BS"],
#     "S2" => [s25_half_handles[0][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m3a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_half_handles[2][0], "BS"],
#     "S3" => [s36_half_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_half_handles[1][0], "BS"],
#     "S2" => [s25_half_handles[1][0], "BS"],
#     "S3" => [s36_half_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"]

# })

# m2b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_half_handles[2][0], "BS"],
#     "S2" => [s25_half_handles[3][0], "BS"],
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"]
# })

# m3b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S2" => [s25_half_handles[5][0], "BS"],
#     "S3" => [s36_half_handles[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_bot_left = bg.sequence_generator({
#     "S1" => [s14_half_handles[3][0], "BS"],
#     "S2" => [s25_half_handles[4][0], "BS"],
#     "S3" => [s36_half_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage II

# # Layer 1

# m1a_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[0][0]), "BS"]

# })

# m2a_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m3a_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_half_handles[6][0], "BS"],
#     "S3" => [s36_half_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_half_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[2][0]), "BS"],

# })

# m2b_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"]
# })

# m3b_2x2x2_top_left = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S2" => [s25_half_handles[7][0], "BS"],
#     "S3" => [s36_half_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_top_left = bg.sequence_generator({
#     "S3" => [s36_half_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage III


# # Layer 1

# m1a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[0][0]), "BS"]

# })

# m2a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_half_handles[4][0], "BS"],
#     "S2" => [s25_half_handles[8][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[1][0]), "BS"]
# })

# m3a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_half_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[2][0]), "BS"]

# })

# m2b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_half_handles[6][0], "BS"],
#     "S2" => [s25_half_handles[9][0], "BS"],
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[3][0]), "BS"]
# })

# m3b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_bot_right = bg.sequence_generator({
#     "S1" => [s14_half_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# ### Hierarhical Stage IV

# # Layer 1

# m1a_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[4][0]), "BS"]

# })

# m2a_2x2x2_top_right = bg.sequence_generator({
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[5][0]), "BS"]
# })

# m3a_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m4a_2x2x2_top_right = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# # Layer 2

# m1b_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+0][0], "BS"],
#     "S2" => [s25_handles[1+0][0], "BS"],
#     "S3" => [s36_handles[2+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[6][0]), "BS"]

# })

# m2b_2x2x2_top_right = bg.sequence_generator({
#     "S3" => [s36_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[7][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[7][0]), "BS"]
# })

# m3b_2x2x2_top_right = bg.sequence_generator({
#     "S1" => [s14_handles[2+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[9][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+0][0]), "BS"]
# })

# m4b_2x2x2_top_right = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2+1][0]), "BS"]
# })

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])


# bg.to_csv(["Sequence"] + m1a_2x2x2_bot_left + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1a_bot_left.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_bot_left + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2a_bot_left.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_bot_left + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3a_bot_left.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_bot_left + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4a_bot_left.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_bot_left + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1b_bot_left.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_bot_left + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2b_bot_left.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_bot_left + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3b_bot_left.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_bot_left + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4b_bot_left.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_top_left + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1a_top_left.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_top_left + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2a_top_left.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_top_left + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3a_top_left.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_top_left + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4a_top_left.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_top_left + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1b_top_left.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_top_left + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2b_top_left.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_top_left + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3b_top_left.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_top_left + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4b_top_left.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_bot_right + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1a_bot_right.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_bot_right + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2a_bot_right.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_bot_right + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3a_bot_right.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_bot_right + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4a_bot_right.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_bot_right + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1b_bot_right.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_bot_right + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2b_bot_right.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_bot_right + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3b_bot_right.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_bot_right + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4b_bot_right.csv")

# bg.to_csv(["Sequence"] + m1a_2x2x2_top_right + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1a_top_right.csv")
# bg.to_csv(["Sequence"] + m2a_2x2x2_top_right + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2a_top_right.csv")
# bg.to_csv(["Sequence"] + m3a_2x2x2_top_right + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3a_top_right.csv")
# bg.to_csv(["Sequence"] + m4a_2x2x2_top_right + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4a_top_right.csv")

# bg.to_csv(["Sequence"] + m1b_2x2x2_top_right + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m1b_top_right.csv")
# bg.to_csv(["Sequence"] + m2b_2x2x2_top_right + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m2b_top_right.csv")
# bg.to_csv(["Sequence"] + m3b_2x2x2_top_right + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m3b_top_right.csv")
# bg.to_csv(["Sequence"] + m4b_2x2x2_top_right + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}2x2x2x4-new/m4b_top_right.csv")

bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=48, number=1, overlap=0.5, godmode=false)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=48, number=1, overlap=0.5, godmode=false)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=48, number=1, overlap=0.5, godmode=false)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(5, 7, 0.4, 100)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score


# 4x7M assembles from 1x4Ms ::: 28 components

# m1a_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_4x7m = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_4x7m = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_4x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ###

# m1b_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_4x7m = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_4x7m = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_4x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# ###

# m1c_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+0][0], "BS"],
#     "S2" => [s25_handles[8+0][0], "BS"],
#     "S3" => [s36_handles[8+0][0], "BS"]
# })

# m2c_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+1][0], "BS"],
#     "S2" => [s25_handles[8+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+0][0]), "BS"]
# })

# m3c_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+1][0]), "BS"]
# })

# m4c_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[8+3][0], "BS"],
#     "S2" => [s25_handles[8+3][0], "BS"],
#     "S3" => [s36_handles[8+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+2][0]), "BS"]
# })

# m5c_4x7m = bg.sequence_generator({
#     "S2" => [s25_handles[8+2][0], "BS"],
#     "S3" => [s36_handles[8+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8+0][0]), "BS"]
# })

# m6c_4x7m = bg.sequence_generator({
#     "S3" => [s36_handles[8+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+2][0]), "BS"]
# })

# m7c_4x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[8+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8+3][0]), "BS"]
# })


# m1d_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[12+0][0], "BS"],
#     "S2" => [s25_handles[12+0][0], "BS"],
#     "S3" => [s36_handles[12+0][0], "BS"]
# })

# m2d_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[12+1][0], "BS"],
#     "S2" => [s25_handles[12+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[12+0][0]), "BS"]
# })

# m3d_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[12+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[12+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[12+1][0]), "BS"]
# })

# m4d_4x7m = bg.sequence_generator({
#     "S1" => [s14_handles[12+3][0], "BS"],
#     "S2" => [s25_handles[12+3][0], "BS"],
#     "S3" => [s36_handles[12+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[12+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[12+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[12+2][0]), "BS"]
# })

# m5d_4x7m = bg.sequence_generator({
#     "S2" => [s25_handles[12+2][0], "BS"],
#     "S3" => [s36_handles[12+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[12+0][0]), "BS"]
# })

# m6d_4x7m = bg.sequence_generator({
#     "S3" => [s36_handles[12+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[12+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[12+2][0]), "BS"]
# })

# m7d_4x7m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[12+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[12+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[12+3][0]), "BS"]
# })


# ma_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])


# mb_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])


# mc_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])


# md_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])


# bg.to_csv(["Sequence"] + m1a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m1a_4x7.csv")
# bg.to_csv(["Sequence"] + m1b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m1b_4x7.csv")
# bg.to_csv(["Sequence"] + m1c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m1c_4x7.csv")
# bg.to_csv(["Sequence"] + m1d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m1d_4x7.csv")

# bg.to_csv(["Sequence"] + m2a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m2a_4x7.csv")
# bg.to_csv(["Sequence"] + m2b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m2b_4x7.csv")
# bg.to_csv(["Sequence"] + m2c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m2c_4x7.csv")
# bg.to_csv(["Sequence"] + m2d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m2d_4x7.csv")

# bg.to_csv(["Sequence"] + m3a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m3a_4x7.csv")
# bg.to_csv(["Sequence"] + m3b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m3b_4x7.csv")
# bg.to_csv(["Sequence"] + m3c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m3c_4x7.csv")
# bg.to_csv(["Sequence"] + m3d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m3d_4x7.csv")

# bg.to_csv(["Sequence"] + m4a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m4a_4x7.csv")
# bg.to_csv(["Sequence"] + m4b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m4b_4x7.csv")
# bg.to_csv(["Sequence"] + m4c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m4c_4x7.csv")
# bg.to_csv(["Sequence"] + m4d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m4d_4x7.csv")

# bg.to_csv(["Sequence"] + m5a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m5a_4x7.csv")
# bg.to_csv(["Sequence"] + m5b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m5b_4x7.csv")
# bg.to_csv(["Sequence"] + m5c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m5c_4x7.csv")
# bg.to_csv(["Sequence"] + m5d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m5d_4x7.csv")

# bg.to_csv(["Sequence"] + m6a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m6a_4x7.csv")
# bg.to_csv(["Sequence"] + m6b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m6b_4x7.csv")
# bg.to_csv(["Sequence"] + m6c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m6c_4x7.csv")
# bg.to_csv(["Sequence"] + m6d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m6d_4x7.csv")

# bg.to_csv(["Sequence"] + m7a_4x7m + ma_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m7a_4x7.csv")
# bg.to_csv(["Sequence"] + m7b_4x7m + mb_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m7b_4x7.csv")
# bg.to_csv(["Sequence"] + m7c_4x7m + mc_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m7c_4x7.csv")
# bg.to_csv(["Sequence"] + m7d_4x7m + md_z + basic_zs, "#{MAC_SAVE_PATH}4x7/m7d_4x7.csv")

# 4x4x2M assembles from 1x4Ms ::: 32 components

# m1a_4x4x2 = bg.sequence_generator({
#     "S3" => [s36_4s4b[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[0][0]), "BS"]
# })

# m2a_4x4x2 = bg.sequence_generator({
#     "S3" => [s36_4s4b[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[0][0]), "BS"]
# })

# m3a_4x4x2 = bg.sequence_generator({
#     "S3" => [s36_4s4b[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_4s4b[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[1][0]), "BS"]
# })

# m4a_4x4x2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_4s4b[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_4s4b[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[2][0]), "BS"]
# })

# m5a_4x4x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[0][0], "BS"],
#     "S2" => [s25_4s4b[0][0], "BS"],
#     "S3" => [s36_4s4b[3][0], "BS"],
# })

# m6a_4x4x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[1][0], "BS"],
#     "S2" => [s25_4s4b[1][0], "BS"],
#     "S3" => [s36_4s4b[4][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[3][0]), "BS"]
# })

# m7a_4x4x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[2][0], "BS"],
#     "S2" => [s25_4s4b[2][0], "BS"],
#     "S3" => [s36_4s4b[5][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[4][0]), "BS"]
# })

# m8a_4x4x2 = bg.sequence_generator({
#     "S1" => [s14_4s4b[3][0], "BS"],
#     "S6" => [bg.complement_side(s36_4s4b[5][0]), "BS"]
# })

# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"

# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"

# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 4, [], count=8, number=2, overlap=0.25, godmode=false, min_strength=47.0, max_strength=53.0)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"

# ### Layer 1

# m1a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7M = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7M = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7M = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7M = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7M = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7M = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7M = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# basic_zs = bg.get_basic_zs

# z_6h_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 7, 0.34, 100, 65, 69)
# z_6h_head_bonds = bg.z_complement_side(z_6h_tail_bonds)
# p z_6h_tail_bonds, z_6h_head_bonds, z_score

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 7, 0.25, 100, 90, 93)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# z_10h_tail_bonds, z_score = bg.best_z_bonds_out_of(5, 7, 0.4, 1000, 110, 118)
# z_10h_head_bonds = bg.z_complement_side(z_10h_tail_bonds)
# p z_10h_tail_bonds, z_10h_head_bonds, z_score

# m1a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z_6h = bg.add_z_bonds("TAIL", z_6h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[0])
# m2b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[1])
# m3b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[2])
# m4b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[3])
# m5b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[4])
# m6b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[5])
# m7b_z_6h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[6])

# m1a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z_8h = bg.add_z_bonds("TAIL", z_8h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
# m5b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m6b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])
# m7b_z_8h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[6])

# m1a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z_10h = bg.add_z_bonds("TAIL", z_10h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[0])
# m2b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[1])
# m3b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[2])
# m4b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[3])
# m5b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[4])
# m6b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[5])
# m7b_z_10h = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_10h_head_bonds[6])

# #### 6H ####

# bg.to_csv(["Sequence"] + m1a_2x7M + m1a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m1a_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m2a_2x7M + m2a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m2a_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m3a_2x7M + m3a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m3a_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m4a_2x7M + m4a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m4a_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m5a_2x7M + m5a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m5a_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m6a_2x7M + m6a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m6a_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m7a_2x7M + m7a_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m7a_2x7_6h.csv")

# bg.to_csv(["Sequence"] + m1b_2x7M + m1b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m1b_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m2b_2x7M + m2b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m2b_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m3b_2x7M + m3b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m3b_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m4b_2x7M + m4b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m4b_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m5b_2x7M + m5b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m5b_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m6b_2x7M + m6b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m6b_2x7_6h.csv")
# bg.to_csv(["Sequence"] + m7b_2x7M + m7b_z_6h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m7b_2x7_6h.csv")

# #### 8H ####

# bg.to_csv(["Sequence"] + m1a_2x7M + m1a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m1a_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m2a_2x7M + m2a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m2a_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m3a_2x7M + m3a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m3a_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m4a_2x7M + m4a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m4a_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m5a_2x7M + m5a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m5a_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m6a_2x7M + m6a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m6a_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m7a_2x7M + m7a_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m7a_2x7_8h.csv")

# bg.to_csv(["Sequence"] + m1b_2x7M + m1b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m1b_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m2b_2x7M + m2b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m2b_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m3b_2x7M + m3b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m3b_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m4b_2x7M + m4b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m4b_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m5b_2x7M + m5b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m5b_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m6b_2x7M + m6b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m6b_2x7_8h.csv")
# bg.to_csv(["Sequence"] + m7b_2x7M + m7b_z_8h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m7b_2x7_8h.csv")

# #### 10H ####

# bg.to_csv(["Sequence"] + m1a_2x7M + m1a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m1a_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m2a_2x7M + m2a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m2a_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m3a_2x7M + m3a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m3a_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m4a_2x7M + m4a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m4a_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m5a_2x7M + m5a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m5a_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m6a_2x7M + m6a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m6a_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m7a_2x7M + m7a_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m7a_2x7_10h.csv")

# bg.to_csv(["Sequence"] + m1b_2x7M + m1b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m1b_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m2b_2x7M + m2b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m2b_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m3b_2x7M + m3b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m3b_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m4b_2x7M + m4b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m4b_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m5b_2x7M + m5b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m5b_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m6b_2x7M + m6b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m6b_2x7_10h.csv")
# bg.to_csv(["Sequence"] + m7b_2x7M + m7b_z_10h + basic_zs, "#{MAC_SAVE_PATH}2x7-but-sodium/m7b_2x7_10h.csv")




bg = BondGenerator.new

### Interior Edges

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 10, [], count=28, number=2, overlap=0.5, godmode=false)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"

# mat = bg.compute_similiarity_matrix(s14_handles)
# bg.draw_matrix(mat)
# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 4, [], count=28, number=2, overlap=0.5, godmode=false)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"
# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 4, [], count=28, number=2, overlap=0.5, godmode=false)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"

### Exterior Edges

# s14_half_handles, s14_half_handles_score = bg.best_sides_out_of("S14", "handles", 1, [], count=65, number=1, overlap=0.5, godmode=false)
# p s14_half_handles, s14_half_handles_score 
# p "Half-Handle S14 score: #{s14_half_handles_score}"

# s25_half_handles, s25_half_handles_score = bg.best_sides_out_of("S25", "handles", 1, [], count=65, number=1, overlap=0.5, godmode=false)
# p s25_half_handles, s25_half_handles_score 
# p "Half-Handle S25 score: #{s25_half_handles_score}"

# s36_half_handles, s36_half_handles_score = bg.best_sides_out_of("S36", "handles", 1, [], count=65, number=1, overlap=0.5, godmode=false)
# p s36_half_handles, s36_half_handles_score 
# p "Half-Handle S36 score: #{s36_half_handles_score}"

#######################################
################# T1 ##################
#######################################

# Layer 1

# m1a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_half_handles[2][0], "BS"],
#     "S3" => [s36_half_handles[1][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_half_handles[0][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_half_handles[0][0], "BS"],
#     "S2" => [s25_half_handles[1][0], "BS"],
#     "S3" => [s36_half_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"]
# })

# m2b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S2" => [s25_half_handles[5][0], "BS"],
#     "S3" => [s36_half_handles[4][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7m_T1 = bg.sequence_generator({
#     "S2" => [s25_half_handles[3][0], "BS"],
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7m_T1 = bg.sequence_generator({
#     "S1" => [s14_half_handles[3][0], "BS"],
#     "S2" => [s25_half_handles[4][0], "BS"],
#     "S3" => [s36_half_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# ########################################
# ################## T2 ##################
# ########################################

# ### Layer 1

# m1a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[0][0]), "BS"]
# })

# m2a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_half_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T2 = bg.sequence_generator({
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m6a_2x7m_T2 = bg.sequence_generator({
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"]
# })

# m7a_2x7m_T2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[3][0]), "BS"]
# })

# m2b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S3" => [s36_half_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_half_handles[5][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T2 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T2 = bg.sequence_generator({
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"]
# })

# m6b_2x7m_T2 = bg.sequence_generator({
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"]
# })

# m7b_2x7m_T2 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })


# ########################################
# ################## T3 ##################
# ########################################

# ### Layer 1

# m1a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[1][0]), "BS"]
# })

# m2a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m5a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[1][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[0][0]), "BS"]
# })

# m6a_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[2][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[2][0]), "BS"]
# })

# m7a_2x7m_T3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# ### Layer 2

# m1b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+0][0], "BS"],
#     "S2" => [s25_handles[4+0][0], "BS"],
#     "S3" => [s36_handles[4+0][0], "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[4][0]), "BS"]
# })

# m2b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+1][0], "BS"],
#     "S2" => [s25_handles[4+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+0][0]), "BS"]
# })

# m3b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+2][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+1][0]), "BS"]
# })

# m4b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_handles[4+3][0], "BS"],
#     "S2" => [s25_handles[4+3][0], "BS"],
#     "S3" => [s36_handles[4+1][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+2][0]), "BS"]
# })

# m5b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[4][0], "BS"],
#     "S2" => [s25_handles[4+2][0], "BS"],
#     "S3" => [s36_handles[4+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+0][0]), "BS"],
#     "S5" => [bg.complement_side(s25_half_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[3][0]), "BS"]
# })

# m6b_2x7m_T3 = bg.sequence_generator({
#     "S1" => [s14_half_handles[5][0], "BS"],
#     "S3" => [s36_handles[4+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_half_handles[5][0]), "BS"]
# })

# m7b_2x7m_T3 = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[4+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4+3][0]), "BS"]
# })

# z_8h_tail_bonds, z_score = bg.best_z_bonds_out_of(4, 7, 0.25, 100, 90, 95)
# z_8h_head_bonds = bg.z_complement_side(z_8h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_8h_tail_bonds, z_8h_head_bonds, z_score

# m1a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z = bg.add_z_bonds("TAIL", z_8h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[3])
# m5b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[4])
# m6b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[5])
# m7b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_8h_head_bonds[6])


# T1

# bg.to_csv(["Sequence"] + m1a_2x7m_T1 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m1a_T1.csv")
# bg.to_csv(["Sequence"] + m2a_2x7m_T1 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m2a_T1.csv")
# bg.to_csv(["Sequence"] + m3a_2x7m_T1 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m3a_T1.csv")
# bg.to_csv(["Sequence"] + m4a_2x7m_T1 + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m4a_T1.csv")
# bg.to_csv(["Sequence"] + m5a_2x7m_T1 + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m5a_T1.csv")
# bg.to_csv(["Sequence"] + m6a_2x7m_T1 + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m6a_T1.csv")
# bg.to_csv(["Sequence"] + m7a_2x7m_T1 + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m7a_T1.csv")

# bg.to_csv(["Sequence"] + m1b_2x7m_T1 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m1b_T1.csv")
# bg.to_csv(["Sequence"] + m2b_2x7m_T1 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m2b_T1.csv")
# bg.to_csv(["Sequence"] + m3b_2x7m_T1 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m3b_T1.csv")
# bg.to_csv(["Sequence"] + m4b_2x7m_T1 + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m4b_T1.csv")
# bg.to_csv(["Sequence"] + m5b_2x7m_T1 + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m5b_T1.csv")
# bg.to_csv(["Sequence"] + m6b_2x7m_T1 + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m6b_T1.csv")
# bg.to_csv(["Sequence"] + m7b_2x7m_T1 + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m7b_T1.csv")

# ### T2

# bg.to_csv(["Sequence"] + m1a_2x7m_T2 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m1a_T2.csv")
# bg.to_csv(["Sequence"] + m2a_2x7m_T2 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m2a_T2.csv")
# bg.to_csv(["Sequence"] + m3a_2x7m_T2 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m3a_T2.csv")
# bg.to_csv(["Sequence"] + m4a_2x7m_T2 + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m4a_T2.csv")
# bg.to_csv(["Sequence"] + m5a_2x7m_T2 + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m5a_T2.csv")
# bg.to_csv(["Sequence"] + m6a_2x7m_T2 + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m6a_T2.csv")
# bg.to_csv(["Sequence"] + m7a_2x7m_T2 + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m7a_T2.csv")

# bg.to_csv(["Sequence"] + m1b_2x7m_T2 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m1b_T2.csv")
# bg.to_csv(["Sequence"] + m2b_2x7m_T2 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m2b_T2.csv")
# bg.to_csv(["Sequence"] + m3b_2x7m_T2 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m3b_T2.csv")
# bg.to_csv(["Sequence"] + m4b_2x7m_T2 + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m4b_T2.csv")
# bg.to_csv(["Sequence"] + m5b_2x7m_T2 + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m5b_T2.csv")
# bg.to_csv(["Sequence"] + m6b_2x7m_T2 + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m6b_T2.csv")
# bg.to_csv(["Sequence"] + m7b_2x7m_T2 + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m7b_T2.csv")

# ### T3

# bg.to_csv(["Sequence"] + m1a_2x7m_T3 + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m1a_T3.csv")
# bg.to_csv(["Sequence"] + m2a_2x7m_T3 + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m2a_T3.csv")
# bg.to_csv(["Sequence"] + m3a_2x7m_T3 + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m3a_T3.csv")
# bg.to_csv(["Sequence"] + m4a_2x7m_T3 + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m4a_T3.csv")
# bg.to_csv(["Sequence"] + m5a_2x7m_T3 + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m5a_T3.csv")
# bg.to_csv(["Sequence"] + m6a_2x7m_T3 + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m6a_T3.csv")
# bg.to_csv(["Sequence"] + m7a_2x7m_T3 + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m7a_T3.csv")

# bg.to_csv(["Sequence"] + m1b_2x7m_T3 + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m1b_T3.csv")
# bg.to_csv(["Sequence"] + m2b_2x7m_T3 + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m2b_T3.csv")
# bg.to_csv(["Sequence"] + m3b_2x7m_T3 + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m3b_T3.csv")
# bg.to_csv(["Sequence"] + m4b_2x7m_T3 + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m4b_T3.csv")
# bg.to_csv(["Sequence"] + m5b_2x7m_T3 + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m5b_T3.csv")
# bg.to_csv(["Sequence"] + m6b_2x7m_T3 + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m6b_T3.csv")
# bg.to_csv(["Sequence"] + m7b_2x7m_T3 + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}3x(2x7)-FULL/m7b_T3.csv")

# 2x19M

# bg = BondGenerator.new

# s14_handles, s14_handles_score = bg.best_sides_out_of("S14", "handles", 10, [], count=28, number=2, overlap=0.50, godmode=false, min_strength=43.0)
# p s14_handles, s14_handles_score 
# p "Handle S14 score: #{s14_handles_score}"


# s25_handles, s25_handles_score = bg.best_sides_out_of("S25", "handles", 10, [], count=28, number=2, overlap=0.50, godmode=false, min_strength=43.0)
# p s25_handles, s25_handles_score
# p "Handle S25 score: #{s25_handles_score}"

# s36_handles, s36_handles_score = bg.best_sides_out_of("S36", "handles", 10, [], count=28, number=2, overlap=0.50, godmode=false, min_strength=43.0)
# p s36_handles, s36_handles_score
# p "Handle S36 score: #{s36_handles_score}"

### Layer 1

# m1a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[0][0], "BS"],
#     "S2" => [s25_handles[0][0], "BS"],
#     "S3" => [s36_handles[0][0], "BS"]
# })

# m2a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[1][0], "BS"],
#     "S2" => [s25_handles[1][0], "BS"],
#     "S3" => [s36_handles[1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[0][0]), "BS"]
# })

# m3a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[2][0], "BS"],
#     "S2" => [s25_handles[2][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[1][0]), "BS"]
# })

# m4a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[3][0], "BS"],
#     "S2" => [s25_handles[6][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[4][0]), "BS"]
# })

# m5a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[4][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[8][0]), "BS"]
# })

# m6a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[5][0], "BS"],
#     "S2" => [s25_handles[3][0], "BS"],
#     "S3" => [s36_handles[2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[0][0]), "BS"]
# })

# m7a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[6][0], "BS"],
#     "S2" => [s25_handles[4][0], "BS"],
#     "S3" => [s36_handles[3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[2][0]), "BS"]
# })

# m8a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[7][0], "BS"],
#     "S2" => [s25_handles[5][0], "BS"],
#     "S3" => [s36_handles[4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[3][0]), "BS"]
# })

# m9a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[8][0], "BS"],
#     "S2" => [s25_handles[10][0], "BS"],
#     "S3" => [s36_handles[8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[7][0]), "BS"]
# })

# m10a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[10][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[11][0]), "BS"]
# })

# m11a_19m = bg.sequence_generator({
#     "S2" => [s25_handles[7][0], "BS"],
#     "S3" => [s36_handles[5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[5][0]), "BS"]
# })

# m12a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[10][0], "BS"],
#     "S2" => [s25_handles[8][0], "BS"],
#     "S3" => [s36_handles[6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[5][0]), "BS"]
# })

# m13a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[11][0], "BS"],
#     "S2" => [s25_handles[9][0], "BS"],
#     "S3" => [s36_handles[7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[6][0]), "BS"]
# })

# m14a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[12][0], "BS"],
#     "S2" => [s25_handles[13][0], "BS"],
#     "S3" => [s36_handles[11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[9][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[10][0]), "BS"]
# })

# m15a_19m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[13][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[13][0]), "BS"]
# })

# m16a_19m = bg.sequence_generator({
#     "S2" => [s25_handles[11][0], "BS"],
#     "S3" => [s36_handles[9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[7][0]), "BS"],
# })

# m17a_19m = bg.sequence_generator({
#     "S1" => [s14_handles[13][0], "BS"],
#     "S2" => [s25_handles[12][0], "BS"],
#     "S3" => [s36_handles[10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[9][0]), "BS"]
# })

# m18a_19m = bg.sequence_generator({
#     "S3" => [s36_handles[13][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[12][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[12][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[12][0]), "BS"]
# })

# m19a_19m = bg.sequence_generator({
#     "S3" => [s36_handles[12][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[13][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[11][0]), "BS"],
# })

# ### Layer 2

# m1b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+0][0], "BS"],
#     "S2" => [s25_handles[14+0][0], "BS"],
#     "S3" => [s36_handles[14+0][0], "BS"]
# })

# m2b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+1][0], "BS"],
#     "S2" => [s25_handles[14+1][0], "BS"],
#     "S3" => [s36_handles[14+1][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+0][0]), "BS"]
# })

# m3b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+2][0], "BS"],
#     "S2" => [s25_handles[14+2][0], "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+1][0]), "BS"]
# })

# m4b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+3][0], "BS"],
#     "S2" => [s25_handles[14+6][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+2][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+4][0]), "BS"]
# })

# m5b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+4][0], "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+6][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+8][0]), "BS"]
# })

# m6b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+5][0], "BS"],
#     "S2" => [s25_handles[14+3][0], "BS"],
#     "S3" => [s36_handles[14+2][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+0][0]), "BS"]
# })

# m7b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+6][0], "BS"],
#     "S2" => [s25_handles[14+4][0], "BS"],
#     "S3" => [s36_handles[14+3][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+1][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+0][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+2][0]), "BS"]
# })

# m8b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+7][0], "BS"],
#     "S2" => [s25_handles[14+5][0], "BS"],
#     "S3" => [s36_handles[14+4][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+2][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+1][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+3][0]), "BS"]
# })

# m9b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+8][0], "BS"],
#     "S2" => [s25_handles[14+10][0], "BS"],
#     "S3" => [s36_handles[14+8][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+3][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+5][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+7][0]), "BS"]
# })

# m10b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+4][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+10][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+11][0]), "BS"]
# })

# m11b_19m = bg.sequence_generator({
#     "S2" => [s25_handles[14+7][0], "BS"],
#     "S3" => [s36_handles[14+5][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+5][0]), "BS"]
# })

# m12b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+10][0], "BS"],
#     "S2" => [s25_handles[14+8][0], "BS"],
#     "S3" => [s36_handles[14+6][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+6][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+3][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+5][0]), "BS"]
# })

# m13b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+11][0], "BS"],
#     "S2" => [s25_handles[14+9][0], "BS"],
#     "S3" => [s36_handles[14+7][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+7][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+4][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+6][0]), "BS"]
# })

# m14b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+12][0], "BS"],
#     "S2" => [s25_handles[14+13][0], "BS"],
#     "S3" => [s36_handles[14+11][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+8][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+9][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+10][0]), "BS"]
# })

# m15b_19m = bg.sequence_generator({
#     "S4" => [bg.complement_side(s14_handles[14+9][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+13][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+13][0]), "BS"]
# })

# m16b_19m = bg.sequence_generator({
#     "S2" => [s25_handles[14+11][0], "BS"],
#     "S3" => [s36_handles[14+9][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+10][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+7][0]), "BS"],
# })

# m17b_19m = bg.sequence_generator({
#     "S1" => [s14_handles[14+13][0], "BS"],
#     "S2" => [s25_handles[14+12][0], "BS"],
#     "S3" => [s36_handles[14+10][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+11][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+8][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+9][0]), "BS"]
# })

# m18b_19m = bg.sequence_generator({
#     "S3" => [s36_handles[14+13][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+12][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+12][0]), "BS"],
#     "S6" => [bg.complement_side(s36_handles[14+12][0]), "BS"]
# })

# m19b_19m = bg.sequence_generator({
#     "S3" => [s36_handles[14+12][0], "BS"],
#     "S4" => [bg.complement_side(s14_handles[14+13][0]), "BS"],
#     "S5" => [bg.complement_side(s25_handles[14+11][0]), "BS"],
# })

# z_6h_tail_bonds, z_score = bg.best_z_bonds_out_of(3, 19, 0.5, 1, 67, 76)
# z_6h_head_bonds = bg.z_complement_side(z_6h_tail_bonds)
# basic_zs = bg.get_basic_zs
# p z_6h_tail_bonds, z_6h_head_bonds, z_score


# m1a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[0]) + bg.add_z_bonds("HEAD", [])
# m2a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[1]) + bg.add_z_bonds("HEAD", [])
# m3a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[2]) + bg.add_z_bonds("HEAD", [])
# m4a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[3]) + bg.add_z_bonds("HEAD", [])
# m5a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[4]) + bg.add_z_bonds("HEAD", [])
# m6a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[5]) + bg.add_z_bonds("HEAD", [])
# m7a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[6]) + bg.add_z_bonds("HEAD", [])
# m8a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[7]) + bg.add_z_bonds("HEAD", [])
# m9a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[8]) + bg.add_z_bonds("HEAD", [])
# m10a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[9]) + bg.add_z_bonds("HEAD", [])
# m11a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[10]) + bg.add_z_bonds("HEAD", [])
# m12a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[11]) + bg.add_z_bonds("HEAD", [])
# m13a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[12]) + bg.add_z_bonds("HEAD", [])
# m14a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[13]) + bg.add_z_bonds("HEAD", [])
# m15a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[14]) + bg.add_z_bonds("HEAD", [])
# m16a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[15]) + bg.add_z_bonds("HEAD", [])
# m17a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[16]) + bg.add_z_bonds("HEAD", [])
# m18a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[17]) + bg.add_z_bonds("HEAD", [])
# m19a_z = bg.add_z_bonds("TAIL", z_6h_tail_bonds[18]) + bg.add_z_bonds("HEAD", [])

# m1b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[0])
# m2b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[1])
# m3b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[2])
# m4b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[3])
# m5b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[4])
# m6b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[5])
# m7b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[6])
# m8b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[7])
# m9b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[8])
# m10b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[9])
# m11b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[10])
# m12b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[11])
# m13b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[12])
# m14b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[13])
# m15b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[14])
# m16b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[15])
# m17b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[16])
# m18b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[17])
# m19b_z = bg.add_z_bonds("TAIL", []) + bg.add_z_bonds("HEAD", z_6h_head_bonds[18])


# bg.to_csv(["Sequence"] + m1a_19m + m1a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m1a.csv")
# bg.to_csv(["Sequence"] + m2a_19m + m2a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m2a.csv")
# bg.to_csv(["Sequence"] + m3a_19m + m3a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m3a.csv")
# bg.to_csv(["Sequence"] + m4a_19m + m4a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m4a.csv")
# bg.to_csv(["Sequence"] + m5a_19m + m5a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m5a.csv")
# bg.to_csv(["Sequence"] + m6a_19m + m6a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m6a.csv")
# bg.to_csv(["Sequence"] + m7a_19m + m7a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m7a.csv")
# bg.to_csv(["Sequence"] + m8a_19m + m8a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m8a.csv")
# bg.to_csv(["Sequence"] + m9a_19m + m9a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m9a.csv")
# bg.to_csv(["Sequence"] + m10a_19m + m10a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m10a.csv")
# bg.to_csv(["Sequence"] + m11a_19m + m11a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m11a.csv")
# bg.to_csv(["Sequence"] + m12a_19m + m12a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m12a.csv")
# bg.to_csv(["Sequence"] + m13a_19m + m13a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m13a.csv")
# bg.to_csv(["Sequence"] + m14a_19m + m14a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m14a.csv")
# bg.to_csv(["Sequence"] + m15a_19m + m15a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m15a.csv")
# bg.to_csv(["Sequence"] + m16a_19m + m16a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m16a.csv")
# bg.to_csv(["Sequence"] + m17a_19m + m17a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m17a.csv")
# bg.to_csv(["Sequence"] + m18a_19m + m18a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m18a.csv")
# bg.to_csv(["Sequence"] + m19a_19m + m19a_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m19a.csv")

# bg.to_csv(["Sequence"] + m1b_19m + m1b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m1b.csv")
# bg.to_csv(["Sequence"] + m2b_19m + m2b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m2b.csv")
# bg.to_csv(["Sequence"] + m3b_19m + m3b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m3b.csv")
# bg.to_csv(["Sequence"] + m4b_19m + m4b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m4b.csv")
# bg.to_csv(["Sequence"] + m5b_19m + m5b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m5b.csv")
# bg.to_csv(["Sequence"] + m6b_19m + m6b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m6b.csv")
# bg.to_csv(["Sequence"] + m7b_19m + m7b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m7b.csv")
# bg.to_csv(["Sequence"] + m8b_19m + m8b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m8b.csv")
# bg.to_csv(["Sequence"] + m9b_19m + m9b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m9b.csv")
# bg.to_csv(["Sequence"] + m10b_19m + m10b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m10b.csv")
# bg.to_csv(["Sequence"] + m11b_19m + m11b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m11b.csv")
# bg.to_csv(["Sequence"] + m12b_19m + m12b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m12b.csv")
# bg.to_csv(["Sequence"] + m13b_19m + m13b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m13b.csv")
# bg.to_csv(["Sequence"] + m14b_19m + m14b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m14b.csv")
# bg.to_csv(["Sequence"] + m15b_19m + m15b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m15b.csv")
# bg.to_csv(["Sequence"] + m16b_19m + m16b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m16b.csv")
# bg.to_csv(["Sequence"] + m17b_19m + m17b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m17b.csv")
# bg.to_csv(["Sequence"] + m18b_19m + m18b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m18b.csv")
# bg.to_csv(["Sequence"] + m19b_19m + m19b_z + basic_zs, "#{LINUX_SAVE_PATH}2x19M-but-sodium/m19b.csv")
