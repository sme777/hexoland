continue
evaluate_bonds(used_bonds["S1"][0], s14s.map{|s| s[0]}, s14s_2.map{|s| s[0]})
evaluate_bonds(used_bonds["S2"][0], s25s.map{|s| s[0]}, s25s_2.map{|s| s[0]})
evaluate_bonds(used_bonds["S3"][0], s36s.map{|s| s[0]}, s36s_2.map{|s| s[0]})
continue
evaluate_bonds(used_bonds["S3"][0], s36s.map{|s| s[0]}, s36s_2.map{|s| s[0]})
evaluate_bonds(used_bonds["S2"][0], s25s.map{|s| s[0]}, s25s_2.map{|s| s[0]})
 evaluate_bonds(used_bonds["S2"][0], s25s.map{|s| s[0]}, s25s_2.map{|s| s[0]})
continue
parent
design2
design1
continue
design2
design1
continue
used_bonds["S3"][0]
s36s_2.map {|s| s[0]}
s36s.map {|s| s[0]}
used_bonds["S2"][0]
s25s_2.map {|s| s[0]}
s25s.map {|s| s[0]}
used_bonds["S1"][0]
s14s_2.map {|s| s[0]}
s14s.map {|s| s[0]}
s14s
continue
used_bonds["ZU"][0]
z_tails2
z_tails
continue
z_tails.size
z_tails2.size
z_tails2
z_tails
continue
selected_two_bond_systems
continue
bonds_list
bond_list
group_b_bonds
group_a_bonds
continue
used_bonds["ZU"][0].size
used_bonds["ZU"][0]
used_bonds["ZU"]
continue
bonds[1]
bonds
continue
used_bonds["ZU"]
used_bonds["ZU"].size
used_bonds.keys
used_bonds
continue
compute_similiarity_matrix(s36s)
compute_similiarity_matrix(s25s)
s36s
s25s
compute_assembly_score(compute_similiarity_matrix(s14s))
compute_assembly_score(compute_similiarity_matrix(s14s_2))
compute_similiarity_matrix(s14s_2)
compute_similiarity_matrix(s14s)
s14s_2
s14s
continue
s14s_2
s14s
continue
s14s_2
s14s
continue
s14s
n
s14s
continue
selected_two_bond_systems
n
best_two_bond
n
group_b_bonds
group_a_bonds
n
continue
side
samples
ref_bonds
continue
used_bonds["S1"][0].size
used_bonds.keys
used_bonds
continue
used_bonds["S1"][0].size
used_bonds["S1"][0]
used_bonds["S1"].flatten
used_bonds["S1"]
used_bonds
continue
interface_map["S3"].size
interface_map["S2"].size
interface_map["S1"].size
interface_map.["S1"].size
interface_map.keys
interface_map
continue
block
continue
max_overlap
continue
max_ge
min_ge
continue
structure_map
continue
structure_map
continue
seq_arr[0]
seq_arr
seq_ARR
continue
seq_arr
continue
hex
hex["S1"][1][0]
hex["S1"][1]
hex["S1"][0]
hex["S1"]
hex["S1']
hex
continue
bond_map.keys
pairing
bond_map[pairing] == bonding
pairing
bonding[block]
bonding.keys
bonding
sequence_generator("1")
block[1]
block
continue
z_bonds
continue
z_bonds
continue
z_count
z_bonds
continue
structure_map
n
"#{name}##{block_id}"
n
block_id
monomer
n
monomer
n
block_id
name
n
name
monomer
n
monomer
n
monomer
n
structure_map["#{name}##{block_id}"]
"#{name}##{block_id}"
block_id
name
monomer
n
s
bonds.size
bonds
continue
block_map
block_name
s
continue
bs
structure_map["2x7M#1"]["M6A"][side]
side
s
bond
side
structure_map["2x7M#1"]["M6A"]
 bond_name[/(.*)#/, 1]
block_id
monomer
s
continue
design_map[block]["building_blocks"]
"#{design_map[block]["building_blocks"]}##{block_id}"
block_id
s
bond
bond_name
s
bonds
pairing
s
continue
seq_arr[0].size
seq_arr[0]
seq_arr.size
seq_arr
n
continue
value
key
s
n
s
continue
seq_arr
n
continue
design_map
continue
@assembly.design_map.to_json
continue
@assembly
continue
add_z_bonds("TAIL", [])
n
include_z_bonds
n
all_seqs.size
n
continue
block_map[pairing][neighbor]["S1"]
block_map[pairing][neighbor]["S1"][1][0]
block_map[pairing][neighbor]["S1"][1]
block_map[pairing][neighbor]["S1"][0]
block_map[pairing][neighbor]["S1"]
block_map[pairing][neighbor]
block_map[pairing][monomer][side]
continue
n
s
n
block_map
n
block_map[pairing][monomer]
block_map[pairing][monomer][side]
block_map[pairing][monomer][side] = [block_map[pairing][monomer][side], [s14s[s14_idx][0], "BS"]]
block_map[pairing][monomer]
block_map[pairing][monomer][side]
s
n
s25s
s36s
continue
n
