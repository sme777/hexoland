continue
block.keys
block
blocks
key
merge_map.keys
merge_map
ref_side
assembly_map[key]
continue
change_count
n
continue
merge_map.keys
n
s
n
continue
n
merge_map.keys[0]
(merge_map.keys[0]
key
s
n
continue
merge_map.keys[0]
merge_map.keys
s
assembly_map.keys
continue
n
continue
params[:merge_assembly]
Assembly.find_by(id: params[:merge_assembly].to_i)
n
continue
n
continue
params
continue
flash
continue
decrypt_sequence(sequence)
continue
decrypt_sequence(sequence)
continue
decrypt_sequence(sequence)
continue
decrypt_sequence(sequence)
decrypt_sequence(sequence
continue
match[:structure].match(/^(?<structure>.*)-(?<unit>.*)$/)[:unit]
match[:structure].match(/^(?<structure>.*)-(?<unit>.*)$/)
match[:structure]
match = row["Sample Comments"].match(/^(?<structure>.*)-(?<sequence>[A-Z]+)$/)
row["Sample Comments"].match(/^(?<structure>.*)-(?<sequence>[A-Z]+)$/)
row["Sample Comments"]
row["Sample Comments"].match(/^(?<structure>.*)-(?<unit>\d+(?:[A-Z]+)?)$/)
row["Sample Comments"].match(/^(?<structure>.*)-$/)
row["Sample Comments"].match(/^(?<structure>.*)$/)
row["Sample Comments"].match(/^(?<structure>.*)-(?<unit>\d+(?:[A-Z]+)?)-(?<sequence>[A-Z]+)$/)
row["Sample Comments".match(/^(?<structure>.*)-(?<unit>\d+(?:[A-Z]+)?)-(?<sequence>[A-Z]+)$/)
extract_ids(row["Sample Comments"])
row["Sample Comments"]
structure
continue
kill -9 3244889
continue
sequence
continue
n
s
continue
extract_ids(row["Sample Comments"])
row["Sample Comments"]
sequence
unit
structure
structure, unit, sequence
continue
row["Sample Comments"]
continue
n
s
file_content
n
continue
params
continue
params.keys
params["form-data"]
params[:type]
params
continue
@assembly_method
continue
@assembly_method
continue
@assembly_method
continue
request.env['omniauth.auth']
continue
request.env['omniauth.auth']
auth_hash
continue
Assembly.where(public: nil)
 Assembly.where(public: true).size
 Assembly.all.size
 Assembly.where(public: true)
 Assembly.where(public: false)
continue
!!params[:assembly_public_check]
params[:assembly_public_check]
continue
params[:assembly_public_check]
continue
params[:author]
params[:name]
params
continue
params.keys
params[:author]
params[:description]
params[:name]
params[:design_map]
continue
params[:design_map]
params[:name]
params[:id]
assembly_params
set_assembly
set_params
assembly_params
continue
params.require(:assembly).permit(:author)
params.require(:assembly).permit(:author, :name, :description, :visibility, :design_map)
assembly_params
params
assembly_paramsparams
assembly_params
continue
helix
side
continue
helix
ZU_types()[helix]
continue
ZD_types()[helix]
continue
ZD_types()[helix]
continue
ZD_types()[helix]
continue
ZD_types()[helix]
continue
ZD_types()[helix]
continue
ZD_types()[helix]
helix
side
continue
ZU_types()[helix]
side
ZD_types()[helix]
helix
continue
ZU_types()[:H1]
continue
ZU_types()[:H1]
ZU_types()["H1"]
ZU_types("H1")
helix
ZU_types()
ZU_types()[helix]
ZU_types()[helix] == "P" ? 1 : (ZU_types()[helix] == "S" ? 0 : "-")
side
continue
normalize_bonds_map
continue
zBondToIndex[helix]
continue
zBondToIndex[helix]
helix
continue
bonds[1]
bonds
helices
helix
continue
normalize_bonds_map
continue
bds
bds[1][0] = bds[1][0] + t_bonds
continue
bds
bds[1] = bds[1][0] + t_bonds
bds
continue
hex[side][0][1]
hex[side][1]
add_neutrals(side, hex[side][1], hex[side][0][1])
add_repulsive(side, hex[side][1]).size
add_repulsive(side, hex[side][1])
add_bonds(side, hex[side][1], "BS").size
continue
add_bonds(side, hex[side][1], "BS")
continue
hex[side]
hex[side][1]
hex[side][1][0]
side
bonds
add_bonds
continue
structure_map["7Z#1"]
structure_map.keys
structure_map
continue
bds[1] = bds[1][0] + t_bonds
bds[1]
bds[0]
continue
t_bonds
continue
n
continue
n
s
t_count
continue
t_bonds
t_bonds_assigned
continue
bds[1][0]
bds
side
bds[0]
bds[1][0]
bds[1]
bds
t_count
b_count
continue
item
continue
item
continue
unit
continue
unit
bds
continue
unit
side_map
unit
n
