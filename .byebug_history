continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
continue
overlap_helices
helix_pair4
helix_pair3
helix_pair1
helix_pair2
continue
helix_pair2
continue
n
continue
overlap_helices
continue
p s14.inspect
s14.inspect
s14
n
continue
overlap_helices.all? { |h| helix_pair1.include?(h) }
overlap_helices.all? { |h| helix_pair1.include?(h) })
overlap_helices
continue
helix_pair2
helix_pair1
overlap_helices.all? { |h| helix_pair1.include?(h) }
overlap_helices
continue
n
continue
n
continue
n
continue
n
sides
candidate
overlap_helices
n
bond2
bond1
s
n
s
continue
s
n
s
helix_pair1
BondGenerator.helix_pairs[side]
side
continue
n
continue
n
continue
n
continue
n
continue
z_score
n
continue
z_score
n
continue
n
continue
z_score
n
continue
z_score
n
continue
z_3x6_6h_tail_bonds
z_score
n
continue
z_score
n
continue
z_score
n
continue
z_score
z_3x6_6h_tail_bonds
n
continue
n
continue
 z_complement_side([z_tails[curr_z_idx_count]])
 z_complement_side(z_tails[curr_z_idx_count])
z_tails[curr_z_idx_count]
continue
neighbor
neighbor_map
neighbor_map[neighbor]
continue
n
continue
88+24
@basic_zs[1..].size
@basic_zs[1..]
all_seqs.size
all_seqs
@basic_zs
continue
neighbor_map[block]["ZD"]
continue
z_head_seqs
continue
[neighbor_map[block]["ZU"][1]]
[neighbor_map[block]["ZD"][1]]
add_z_bonds("TAIL", [neighbor_map[block]["ZU"][1]])
[neighbor_map[block]["ZD"][1]]
[neighbor_map[block]["ZU"][1]]
z_tail_seqs
continue
neighbor_map[block]["ZU"]
z_tail_seqs
continue
z_complement_side([neighbor_map[neighbor]["ZU"][1]])
neighbor_map[neighbor]["ZU"][1]
z_complement_side(neighbor_map[neighbor]["ZU"][1])
continue
neighbor_map[neighbor]["ZU"][1]
neighbor_map[neighbor]["ZU"]
continue
n
continue
neighbor_map[neighbor]["ZU"]
continue
neighbor_map[neighbor]["ZU"]
block_neighbors[neighbor]
block_neighbors[neighbor]["ZU"]
block_neighbors[neighbor]["ZU]
continue
temp_file.path
temp_file
continue
csv_data
continue
df.write_csv(temp_file.path)
n
continue
n
continue
picklist.write_csv "temp.csv"
picklist.write_csv
picklist.write_csv("temp.csv")
continue
picklist.write_csv("/")
picklist.write_csv
picklist
picklist.write_csv(temp_file.path, {}, {})
picklist.write_csv(temp_file.path, {})
temp_file.path
picklist.write_csv(temp_file.path)
picklist.write_csv(temp_file)
picklist.write_csv
picklist
temp_file.path
continue
n
continue
new_picklist(seqs, vol_arr[idx], dest_arr[idx])
s
n
continue
@hex_plate[0]
@hex_plate
n
s
new_picklist(seqs, vol_arr[idx], dest_arr[idx])
s
n
continue
new_picklist(seqs, vol_arr[idx], dest_arr[idx])
idx
s
n
seq_arr[0].size
seq_arr.size
seq_arr
n
continue
n
continue
picklist
continue
n
s
continue
n
continue
@current_page
@page_count
continue
@page_count
idx
@current_page
continue
@current_page
continue
@current_page
