continue
69+43
metadata["repulsive_type"]
sequence_generator(bonding[block], metadata["repulsive_type"])
all_seqs.size 
continue
"#{b}_Z_#{side}"
bond
b
continue
["lol"].include?(nil)
sequences[1].include?(nil)
sequences[1]
sequences
seq
continue
seq
continue
seq
continue
sequences[1].size
sequences[1]
sequences[0]
sequences.size
sequences
row
row["Sequence2"]
sequences[1]
continue
key1
continue
new_array.include?(reference)
n
continue
new_array.include?(reference)
new_array
array
n
continue
array.any? { |substring| substring.chars.reduce(reference.chars) { |chars, c| chars.drop_while { |x| x != c } } != [] }
reference
array
continue
reference
array
array.any? { |substring| substring.chars.reduce(reference.chars) { |chars, c| chars.drop_while { |x| x != c } } != [] }
continue
all_seqs.size
n
continue
array.any? { |substring| substring.chars.reduce(reference.chars) { |chars, c| chars.drop_while { |x| x != c } } != [] }
array.any? { |substring| substring.chars.reduce(reference.chars) { |chars, c| chars.drop_while { |x| x != c }[1..] } != nil }
reference
array
continue
all_seqs.size
n
continue
n
continue
n
continue
all_seqs.size
n
add_z_bonds("HEAD", []).size
add_z_bonds("HEAD", [])
n
bonding[block]
add_z_bonds("HEAD", bonding[block]["ZD"][1][0])
all_seqs.size
n
add_z_bonds("TAIL", bonding[block]["ZU"][1][0]).size
add_z_bonds("TAIL", bonding[block]["ZU"][1][0])
all_seqs.size
n
@basic_zs.size
continue
add_z_bonds("TAIL", bonding[block]["ZU"][1][0])
continue
add_z_bonds("TAIL", bonding[block]["ZU"][1][0]).size
add_z_bonds("TAIL", bonding[block]["ZU"][1][0])
n
continue
all_seqs.size
n
continue
bonding[block]["ZU"][1][0]
bonding[block]["ZU"]
all_seqs.size
n
continue
all_seqs.size
continue
all_seqs.size
n
continue
all_seqs.size
continue
all_seqs.size
continue
bonding[block]
bonding
block
neighbors
neighbors[0]
neighbors[0][1]
continue
pairing
block
neighbors
neighbors[0]
neighbors[0][1]
continue
metadata[:repulsive_type]
metadata["repulsive_type"]
metadata
repulsive_type
continue
neighbors
side_group
s
sides
monomer
continue
monomer_map
n
monomer_map
s
n
construct_monomer_map(assembly_map)
assembly_map.keys
assembly_map
monomer_map
n
s
normalized_assembly_map
n
assembly_map.values[0].keys
assembly_map.values[0].size
assembly_map.values[0]
assembly_map.values.size
assembly_map.values
assembly_map.size
assembly_map.keysassembly_map.size
assembly_map.keys
assembly_map
assembly_map.values
assembly_map.values.first
assembly_map.values
s
assembly_map.keys
assembly_map["5Z-12H#1"].keys
assembly_map["5Z-12H#1"]
assembly_map.first
assembly_map.first.keys
assembly_map.first
assembly_map.keys
assembly_map
continue
bonds
continue
bonds
bond
continue
bond
continue
bond
continue
bond
continue
bond
continue
bonds
bond
continue
bonds
continue
bonds
BondGenerator.bond2gibbs_z[bonds]
n
BondGenerator.bond2gibbs_z[bonds]
bonds
continue
bond_arr
bond_arr.size
continue
bond_arr.size
continue
bonds
bond
helices
continue
n
continue
z_complement_side([neighbor_map[neighbor]["ZU"][1][0]])
z_complement_side(neighbor_map[neighbor]["ZU"][1][0])
_complement_side(neighbor_map[neighbor]["ZU"][1][0])
neighbor_map[neighbor]["ZU"][1][0]
z_complement_side(neighbor_map[neighbor]["ZU"][1][0])
continue
n
continue
z_complement_side([neighbor_map[neighbor]["ZU"][1][0]])
z_complement_side([neighbor_map[neighbor]["ZU"][1]])
neighbor_map[neighbor]["ZU"][1][0]
neighbor_map[neighbor]["ZU"][1]
neighbor_map[neighbor]["ZU"]
continue
helix.split("#").first
continue
bonds[1]
bonds
continue
bonds
continue
bonds
continue
bonds
continue
bonds
continue
bonds
continue
bonds
continue
self.id
assembly.id
continue
bonds[1]
side
continue
side
sid
continue
helix
continue
helix
continue
helix
continue
bonds[1][0]
bonds[1]
bonds
side
continue
number
bonds
continue
n
continue
n
continue
n
s
bond_map
n
